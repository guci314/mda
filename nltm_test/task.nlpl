
程序: 智能排序系统
  目标: 实现并比较多种排序算法
  
  状态:
    - 数据集: [64, 34, 25, 12, 22, 11, 90, 88, 45, 37]
    - 排序结果: {}
    - 当前算法: null
    - 比较次数: {}
    - 最优算法: null
  
  主流程:
    步骤1 准备数据:
      生成: 测试数据集
      保存到: data.json
      设置: 原始数据 = 数据集副本
    
    步骤2 实现冒泡排序:
      设置: 当前算法 = "冒泡排序"
      循环 对于i从0到n-1:
        循环 对于j从0到n-i-1:
          如果 数组[j] > 数组[j+1]:
            交换: 数组[j]和数组[j+1]
          增加: 比较次数
      保存: 排序结果.冒泡 = 数组
    
    步骤3 实现快速排序:
      设置: 当前算法 = "快速排序"
      调用: 快排递归(数组, 0, n-1)
      保存: 排序结果.快排 = 数组
    
    步骤4 实现插入排序:
      设置: 当前算法 = "插入排序"
      循环 对于i从1到n:
        key = 数组[i]
        j = i-1
        循环 当j>=0且数组[j]>key:
          数组[j+1] = 数组[j]
          j = j-1
        数组[j+1] = key
      保存: 排序结果.插入 = 数组
    
    步骤5 性能比较:
      分析: 各算法的比较次数
      评估: 时间复杂度
      决定: 最优算法
      生成: 性能报告
    
    步骤6 验证正确性:
      对于每个 算法结果:
        验证: 是否升序
        验证: 元素完整性
        如果 验证失败:
          记录: 错误信息
    
    完成:
      输出: 排序结果
      输出: 性能分析
      推荐: 最优算法
  
  子程序: 快排递归(数组, 低, 高)
    如果 低 < 高:
      pivot = 分区(数组, 低, 高)
      快排递归(数组, 低, pivot-1)
      快排递归(数组, pivot+1, 高)
    返回: 数组
