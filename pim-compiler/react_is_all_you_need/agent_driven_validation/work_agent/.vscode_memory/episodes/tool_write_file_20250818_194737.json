{
  "id": "tool_write_file_20250818_194737",
  "timestamp": "2025-08-18T19:47:37.853311",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "\"\"\"\n任务管理器\n\"\"\"\n\nfrom typing import List, Optional, Dict\nfrom task import Task, TaskStatus\n\nclass TaskManager:\n    \"\"\"\n    任务管理器类，负责管理任务的增删改查\n    \"\"\"\n    def __init__(self):\n        self.tasks: Dict[int, Task] = {}\n        self.next_id = 1\n    \n    def add_task(self, title: str, description: str = \"\") -> Task:\n        \"\"\"\n        添加新任务\n        \n        Args:\n            title: 任务标题\n            description: 任务描述\n            \n        Returns:\n            创建的任务对象\n        \"\"\"\n        task = Task(self.next_id, title, description)\n        self.tasks[self.next_id] = task\n        self.next_id += 1\n        return task\n    \n    def remove_task(self, task_id: int) -> bool:\n        \"\"\"\n        删除任务\n        \n        Args:\n            task_id: 任务ID\n            \n        Returns:\n            删除成功返回True，任务不存在返回False\n        \"\"\"\n        if task_id in self.tasks:\n            del self.tasks[task_id]\n            return True\n        return False\n    \n    def update_task(self, task_id: int, title: Optional[str] = None, \n                   description: Optional[str] = None, \n                   status: Optional[TaskStatus] = None) -> Optional[Task]:\n        \"\"\"\n        更新任务信息\n        \n        Args:\n            task_id: 任务ID\n            title: 新标题（可选）\n            description: 新描述（可选）\n            status: 新状态（可选）\n            \n        Returns:\n            更新后的任务对象，任务不存在返回None\n        \"\"\"\n        if task_id not in self.tasks:\n            return None\n            \n        task = self.tasks[task_id]\n        \n        if title is not None:\n            task.update_title(title)\n            \n        if description is not None:\n            task.update_description(description)\n            \n        if status is not None:\n            task.update_status(status)\n            \n        return task\n    \n    def get_task(self, task_id: int) -> Optional[Task]:\n        \"\"\"\n        获取任务\n        \n        Args:\n            task_id: 任务ID\n            \n        Returns:\n            任务对象，不存在返回None\n        \"\"\"\n        return self.tasks.get(task_id)\n    \n    def list_tasks(self) -> List[Task]:\n        \"\"\"\n        获取所有任务列表\n        \n        Returns:\n            任务列表\n        \"\"\"\n        return list(self.tasks.values())\n    \n    def list_tasks_by_status(self, status: TaskStatus) -> List[Task]:\n        \"\"\"\n        根据状态获取任务列表\n        \n        Args:\n            status: 任务状态\n            \n        Returns:\n            符合状态的任务列表\n        \"\"\"\n        return [task for task in self.tasks.values() if task.status == status]\n    \n    def get_task_count(self) -> int:\n        \"\"\"\n        获取任务总数\n        \n        Returns:\n            任务总数\n        \"\"\"\n        return len(self.tasks)\n    \n    def clear_all_tasks(self):\n        \"\"\"清空所有任务\"\"\"\n        self.tasks.clear()\n        self.next_id = 1",
      "file_path": "task_manager.py"
    },
    "round": 2
  }
}