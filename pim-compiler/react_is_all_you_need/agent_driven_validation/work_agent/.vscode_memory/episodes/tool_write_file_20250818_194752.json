{
  "id": "tool_write_file_20250818_194752",
  "timestamp": "2025-08-18T19:47:52.897251",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "\"\"\"\n任务管理器测试\n\"\"\"\n\nimport unittest\nfrom task_manager import TaskManager\nfrom task import Task, TaskStatus\n\nclass TestTaskManager(unittest.TestCase):\n    \n    def setUp(self):\n        \"\"\"测试前准备\"\"\"\n        self.task_manager = TaskManager()\n    \n    def test_add_task(self):\n        \"\"\"测试添加任务\"\"\"\n        task = self.task_manager.add_task(\"测试任务\", \"这是一个测试任务\")\n        self.assertEqual(task.title, \"测试任务\")\n        self.assertEqual(task.description, \"这是一个测试任务\")\n        self.assertEqual(task.status, TaskStatus.PENDING)\n        self.assertEqual(self.task_manager.get_task_count(), 1)\n    \n    def test_remove_task(self):\n        \"\"\"测试删除任务\"\"\"\n        task = self.task_manager.add_task(\"测试任务\")\n        self.assertTrue(self.task_manager.remove_task(task.id))\n        self.assertIsNone(self.task_manager.get_task(task.id))\n        self.assertEqual(self.task_manager.get_task_count(), 0)\n        \n        # 删除不存在的任务\n        self.assertFalse(self.task_manager.remove_task(999))\n    \n    def test_update_task(self):\n        \"\"\"测试更新任务\"\"\"\n        task = self.task_manager.add_task(\"原始任务\", \"原始描述\")\n        \n        # 更新标题和描述\n        updated_task = self.task_manager.update_task(\n            task.id, \n            title=\"更新后的任务\", \n            description=\"更新后的描述\"\n        )\n        \n        self.assertEqual(updated_task.title, \"更新后的任务\")\n        self.assertEqual(updated_task.description, \"更新后的描述\")\n        \n        # 更新状态\n        updated_task = self.task_manager.update_task(\n            task.id, \n            status=TaskStatus.COMPLETED\n        )\n        \n        self.assertEqual(updated_task.status, TaskStatus.COMPLETED)\n        \n        # 更新不存在的任务\n        self.assertIsNone(self.task_manager.update_task(999, title=\"测试\"))\n    \n    def test_get_task(self):\n        \"\"\"测试获取任务\"\"\"\n        task = self.task_manager.add_task(\"测试任务\")\n        retrieved_task = self.task_manager.get_task(task.id)\n        self.assertEqual(task, retrieved_task)\n        \n        # 获取不存在的任务\n        self.assertIsNone(self.task_manager.get_task(999))\n    \n    def test_list_tasks(self):\n        \"\"\"测试任务列表\"\"\"\n        self.task_manager.add_task(\"任务1\")\n        self.task_manager.add_task(\"任务2\")\n        self.task_manager.add_task(\"任务3\")\n        \n        tasks = self.task_manager.list_tasks()\n        self.assertEqual(len(tasks), 3)\n    \n    def test_list_tasks_by_status(self):\n        \"\"\"测试按状态筛选任务\"\"\"\n        task1 = self.task_manager.add_task(\"任务1\")\n        task2 = self.task_manager.add_task(\"任务2\")\n        task3 = self.task_manager.add_task(\"任务3\")\n        \n        # 更新任务状态\n        self.task_manager.update_task(task1.id, status=TaskStatus.COMPLETED)\n        self.task_manager.update_task(task2.id, status=TaskStatus.IN_PROGRESS)\n        \n        # 检查各状态的任务数量\n        completed_tasks = self.task_manager.list_tasks_by_status(TaskStatus.COMPLETED)\n        in_progress_tasks = self.task_manager.list_tasks_by_status(TaskStatus.IN_PROGRESS)\n        pending_tasks = self.task_manager.list_tasks_by_status(TaskStatus.PENDING)\n        \n        self.assertEqual(len(completed_tasks), 1)\n        self.assertEqual(len(in_progress_tasks), 1)\n        self.assertEqual(len(pending_tasks), 1)\n    \n    def test_clear_all_tasks(self):\n        \"\"\"测试清空所有任务\"\"\"\n        self.task_manager.add_task(\"任务1\")\n        self.task_manager.add_task(\"任务2\")\n        self.assertEqual(self.task_manager.get_task_count(), 2)\n        \n        self.task_manager.clear_all_tasks()\n        self.assertEqual(self.task_manager.get_task_count(), 0)\n\nif __name__ == \"__main__\":\n    unittest.main()",
      "file_path": "test_task_manager.py"
    },
    "round": 3
  }
}