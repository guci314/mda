{
  "aea25614": {
    "id": "aea25614",
    "pattern": "List docker images with size greater than {size_threshold_mb}MB",
    "parameters": [
      {
        "name": "size_threshold_mb",
        "type": "integer",
        "description": "The minimum size of the Docker images to list, in MB.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import subprocess\nimport json\n\ndef get_large_docker_images(size_threshold_mb):\n    \"\"\"Lists Docker images with size greater than the specified threshold.\n\n    Args:\n        size_threshold_mb: The size threshold in MB.\n\n    Returns:\n        A list of dictionaries, where each dictionary contains the image name and size (in MB).\n    \"\"\"\n    try:\n        result = subprocess.run(['docker', 'images', '--format', '{{.Repository}}:{{.Tag}}\\t{{.Size}}'], capture_output=True, text=True, check=True)\n        output = result.stdout.strip()\n        images = []\n        for line in output.splitlines():\n            try:\n                name, size_str = line.split('\\t')\n                size_unit = size_str[-2:].lower()\n                size_value = float(size_str[:-2])\n\n                if size_unit == 'kb':\n                    size_mb = size_value / 1024\n                elif size_unit == 'mb':\n                    size_mb = size_value\n                elif size_unit == 'gb':\n                    size_mb = size_value * 1024\n                else:\n                    size_mb = 0  # Handle unknown units\n\n                if size_mb > size_threshold_mb:\n                    images.append({'name': name, 'size_mb': size_mb})\n            except ValueError:\n                print(f\"Skipping line due to parsing error: {line}\")\n                continue\n\n        return images\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing docker command: {e}\")\n        return []\n\n\nsize_threshold = 50  # Size threshold in MB\nresult = get_large_docker_images(size_threshold)\n\n# Example of printing the result (optional)\n# print(json.dumps(result, indent=4))\n",
    "examples": [
      "列出本机size大于50m的docker image",
      "get_large_docker_images(50)",
      "get_large_docker_images(100)"
    ],
    "created_at": "2025-08-07T03:54:46.674504",
    "use_count": 0,
    "last_used": null
  },
  "fdc85787": {
    "id": "fdc85787",
    "pattern": "List native docker images with size greater than {min_size_mb}MB",
    "parameters": [
      {
        "name": "min_size_mb",
        "type": "integer",
        "description": "The minimum size of the Docker image in MB.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import subprocess\nimport json\n\ndef get_large_docker_images(min_size_mb):\n    \"\"\"Lists Docker images with size greater than a specified value.\n\n    Args:\n        min_size_mb: The minimum size of the Docker image in MB.\n\n    Returns:\n        A list of dictionaries, where each dictionary contains the image name and size (in MB).\n    \"\"\"\n    try:\n        result = subprocess.run(['docker', 'images', '--format', '{{.Repository}}:{{.Tag}}\\t{{.Size}}'], capture_output=True, text=True, check=True)\n        output = result.stdout.strip()\n        images = []\n        for line in output.splitlines():\n            name, size_str = line.split('\\t')\n            size_unit = size_str[-2:].lower()\n            size_value = float(size_str[:-2])\n\n            if size_unit == 'mb':\n                size_mb = size_value\n            elif size_unit == 'gb':\n                size_mb = size_value * 1024\n            elif size_unit == 'kb':\n                size_mb = size_value / 1024\n            elif size_unit == 'bytes':\n                size_mb = size_value / (1024 * 1024)\n            else:\n                size_mb = 0  # Handle unknown units\n\n            if size_mb > min_size_mb:\n                images.append({'name': name, 'size_mb': size_mb})\n        return images\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing docker command: {e}\")\n        return []\n\n\nmin_size = 100\nresult = get_large_docker_images(min_size)\n\n# Example of printing the result (optional)\n# for image in result:\n#     print(f\"Image: {image['name']}, Size: {image['size_mb']:.2f} MB\")",
    "examples": [
      "列出本机size大于100m的docker image",
      "get_large_docker_images(100) # Lists images larger than 100MB",
      "get_large_docker_images(500) # Lists images larger than 500MB"
    ],
    "created_at": "2025-08-07T03:54:53.201264",
    "use_count": 0,
    "last_used": null
  },
  "f29f8e48": {
    "id": "f29f8e48",
    "pattern": "显示docker镜像中超过{size_threshold_mb}MB的镜像",
    "parameters": [
      {
        "name": "size_threshold_mb",
        "type": "integer",
        "description": "Docker镜像大小的阈值，单位为MB",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import subprocess\nimport json\n\ndef get_large_docker_images(size_threshold_mb):\n    \"\"\"Lists Docker images exceeding a specified size threshold.\n\n    Args:\n        size_threshold_mb: The size threshold in MB.\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a Docker image\n        exceeding the size threshold. Each dictionary contains the 'Repository',\n        'Tag', and 'Size' of the image.\n    \"\"\"\n    try:\n        result = subprocess.run(['docker', 'images', '--format', '{{json .}}'], capture_output=True, text=True, check=True)\n        images_data = result.stdout.strip().split('\\n')\n        \n        large_images = []\n        for image_json in images_data:\n            try:\n                image = json.loads(image_json)\n                size_str = image['Size']\n                size_unit = size_str[-2:].upper()\n                size_value = float(size_str[:-2])\n\n                if size_unit == 'KB':\n                    size_mb = size_value / 1024\n                elif size_unit == 'MB':\n                    size_mb = size_value\n                elif size_unit == 'GB':\n                    size_mb = size_value * 1024\n                else:\n                    size_mb = 0  # Handle unknown units\n\n                if size_mb > size_threshold_mb:\n                    large_images.append({\n                        'Repository': image['Repository'],\n                        'Tag': image['Tag'],\n                        'Size': image['Size']\n                    })\n            except json.JSONDecodeError:\n                print(f\"Error decoding JSON: {image_json}\")\n            except KeyError as e:\n                print(f\"KeyError: {e} in image data: {image_json}\")\n\n        return large_images\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing docker command: {e}\")\n        return []\n\n\nsize_threshold = 200\nresult = get_large_docker_images(size_threshold)\n\n",
    "examples": [
      "显示docker镜像中超过200MB的",
      "get_large_docker_images(200)",
      "get_large_docker_images(500)"
    ],
    "created_at": "2025-08-07T03:54:58.960298",
    "use_count": 0,
    "last_used": null
  },
  "96e46372": {
    "id": "96e46372",
    "pattern": "docker images中哪些大于{size_threshold_mb}兆",
    "parameters": [
      {
        "name": "size_threshold_mb",
        "type": "integer",
        "description": "The size threshold in MB for filtering Docker images.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import subprocess\nimport json\n\ndef check_docker_image_size(size_threshold_mb):\n    \"\"\"Checks Docker images and returns those larger than the specified size.\n\n    Args:\n        size_threshold_mb: The size threshold in MB.\n\n    Returns:\n        A list of image names that exceed the size threshold.\n    \"\"\"\n    try:\n        result = subprocess.run(['docker', 'images', '--format', '{{.Repository}}:{{.Tag}}\\t{{.Size}}'], capture_output=True, text=True, check=True)\n        output = result.stdout.strip()\n        lines = output.splitlines()\n        large_images = []\n        for line in lines:\n            if not line:\n                continue\n            image_name, size_str = line.split('\\t')\n            size_unit = size_str[-2:].lower()\n            size_value = float(size_str[:-2])\n\n            if size_unit == 'kb':\n                size_mb = size_value / 1024\n            elif size_unit == 'mb':\n                size_mb = size_value\n            elif size_unit == 'gb':\n                size_mb = size_value * 1024\n            else:\n                continue # Skip if unit is not recognized\n\n            if size_mb > size_threshold_mb:\n                large_images.append(image_name)\n\n        return large_images\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing docker command: {e}\")\n        return []\n\n\nsize_threshold = 500\nresult = check_docker_image_size(size_threshold)\n\n",
    "examples": [
      "docker images中哪些大于500兆",
      "Find Docker images larger than 500MB",
      "Find Docker images larger than 1GB"
    ],
    "created_at": "2025-08-07T03:55:04.462704",
    "use_count": 0,
    "last_used": null
  },
  "7cfb7408": {
    "id": "7cfb7408",
    "pattern": "Find Docker images with size greater than {size_threshold_gb} GB.",
    "parameters": [
      {
        "name": "size_threshold_gb",
        "type": "float",
        "description": "The size threshold in gigabytes for identifying large Docker images.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import subprocess\nimport json\n\ndef check_large_docker_images(size_threshold_gb=1.0):\n    \"\"\"Checks for Docker images exceeding a specified size threshold.\n\n    Args:\n        size_threshold_gb (float): The size threshold in gigabytes. Defaults to 1.0.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a large image\n              and contains its repository, tag, and size in GB.\n    \"\"\"\n    try:\n        result = subprocess.run(['docker', 'images', '--format', '{{.Repository}}\\t{{.Tag}}\\t{{.Size}}'], capture_output=True, text=True, check=True)\n        output = result.stdout.strip()\n        large_images = []\n        for line in output.splitlines():\n            repo, tag, size_str = line.split('\\t')\n            size_unit = size_str[-2:].upper()\n            size_value = float(size_str[:-2])\n\n            if size_unit == 'GB':\n                size_gb = size_value\n            elif size_unit == 'MB':\n                size_gb = size_value / 1024\n            elif size_unit == 'KB':\n                size_gb = size_value / (1024 * 1024)\n            elif size_unit == 'B':\n                size_gb = size_value / (1024 * 1024 * 1024)\n            else:\n                continue # Skip if unit is not recognized\n\n            if size_gb > size_threshold_gb:\n                large_images.append({\"repository\": repo, \"tag\": tag, \"size_gb\": size_gb})\n\n        return large_images\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing docker command: {e}\")\n        return []\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return []\n\n\n# Example usage:\nsize_threshold = 1.0 # in GB\nresult = check_large_docker_images(size_threshold_gb=size_threshold)\n\nprint(json.dumps(result, indent=4))\n",
    "examples": [
      "查看占用空间超过1G的容器镜像",
      "check_large_docker_images(size_threshold_gb=0.5) # Find images larger than 0.5 GB",
      "check_large_docker_images(size_threshold_gb=2.0) # Find images larger than 2 GB"
    ],
    "created_at": "2025-08-07T03:55:10.456589",
    "use_count": 0,
    "last_used": null
  },
  "93c62845": {
    "id": "93c62845",
    "pattern": "查找{directory}目录下所有的.py文件",
    "parameters": [
      {
        "name": "directory",
        "type": "string",
        "description": "要搜索的目录",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import os\n\ndef find_python_files(directory):\n    \"\"\"Finds all .py files in the specified directory.\n\n    Args:\n        directory: The directory to search in.\n\n    Returns:\n        A list of .py files found in the directory.\n    \"\"\"\n    result = []\n    for filename in os.listdir(directory):\n        if filename.endswith(\".py\"):\n            result.append(os.path.join(directory, filename))\n    return result\n\n# Example usage:\ndirectory_to_search = \".\"\nresult = find_python_files(directory_to_search)\nprint(result)",
    "examples": [
      "查找当前目录下所有的.py文件",
      "find_python_files(\".\") # 查找当前目录下的所有.py文件",
      "find_python_files(\"/path/to/your/directory\") # 查找指定目录下的所有.py文件"
    ],
    "created_at": "2025-08-07T03:55:13.918410",
    "use_count": 0,
    "last_used": null
  },
  "705e2d3a": {
    "id": "705e2d3a",
    "pattern": "找出所有.{extension}格式的文件",
    "parameters": [
      {
        "name": "extension",
        "type": "string",
        "description": "The file extension to search for.",
        "extraction_hints": []
      },
      {
        "name": "directory",
        "type": "string",
        "description": "The directory to search in. Defaults to the current directory.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import os\n\ndef find_files_by_extension(directory, extension):\n    \"\"\"Finds all files with a specified extension in a given directory.\n\n    Args:\n        directory (str): The directory to search in.\n        extension (str): The file extension to search for (e.g., 'js').\n\n    Returns:\n        list: A list of file paths matching the extension.\n    \"\"\"\n    result = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith(f'.{extension}'):\n                result.append(os.path.join(root, file))\n    return result\n\n# Example usage:\ndirectory_to_search = '.'  # Current directory\nfile_extension = 'js'\nresult = find_files_by_extension(directory_to_search, file_extension)\n\n",
    "examples": [
      "找出所有.js格式的文件",
      "find_files_by_extension('.', 'js')",
      "find_files_by_extension('/path/to/directory', 'txt')"
    ],
    "created_at": "2025-08-07T03:55:17.906239",
    "use_count": 0,
    "last_used": null
  },
  "82439426": {
    "id": "82439426",
    "pattern": "Calculate the average of the {column_name} column in the {file_path} CSV file.",
    "parameters": [
      {
        "name": "file_path",
        "type": "string",
        "description": "The path to the CSV file.",
        "extraction_hints": []
      },
      {
        "name": "column_name",
        "type": "string",
        "description": "The name of the column to calculate the average from.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import csv\n\ndef calculate_average_revenue(file_path, column_name):\n    \"\"\"Calculates the average of a specified column in a CSV file.\n\n    Args:\n        file_path (str): The path to the CSV file.\n        column_name (str): The name of the column to calculate the average from.\n\n    Returns:\n        float: The average of the specified column, or None if an error occurs.\n    \"\"\"\n    total = 0\n    count = 0\n    try:\n        with open(file_path, 'r') as csvfile:\n            reader = csv.DictReader(csvfile)\n            for row in reader:\n                try:\n                    revenue = float(row[column_name])\n                    total += revenue\n                    count += 1\n                except ValueError:\n                    # Handle cases where the value in the column is not a valid number\n                    continue  # Skip to the next row\n        if count > 0:\n            return total / count\n        else:\n            return None  # Return None if the column is empty or contains no valid numbers\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except KeyError:\n        print(f\"Error: Column '{column_name}' not found in the CSV file.\")\n        return None\n\n\n# Example usage:\nfile_path = 'sales.csv'\ncolumn_name = 'revenue'\nresult = calculate_average_revenue(file_path, column_name)\n\nif result is not None:\n    print(f\"The average {column_name} is: {result}\")\nelse:\n    print(\"Could not calculate the average revenue.\")",
    "examples": [
      "计算sales.csv中revenue列的平均值",
      "calculate_average_revenue('sales.csv', 'revenue')",
      "calculate_average_revenue('data.csv', 'sales_amount')"
    ],
    "created_at": "2025-08-07T03:55:23.119944",
    "use_count": 0,
    "last_used": null
  },
  "8d775b0c": {
    "id": "8d775b0c",
    "pattern": "Calculate the sum of the {column_name} column in the {file_path} CSV file.",
    "parameters": [
      {
        "name": "file_path",
        "type": "string",
        "description": "The path to the CSV file.",
        "extraction_hints": []
      },
      {
        "name": "column_name",
        "type": "string",
        "description": "The name of the column to sum.",
        "extraction_hints": []
      }
    ],
    "compiled_function": "import csv\n\ndef calculate_sum(file_path, column_name):\n    \"\"\"Calculates the sum of a specified column in a CSV file.\n\n    Args:\n        file_path (str): The path to the CSV file.\n        column_name (str): The name of the column to sum.\n\n    Returns:\n        float: The sum of the values in the specified column, or None if an error occurs.\n    \"\"\"\n    total = 0.0\n    try:\n        with open(file_path, 'r') as csvfile:\n            reader = csv.DictReader(csvfile)\n            for row in reader:\n                try:\n                    total += float(row[column_name])\n                except ValueError:\n                    print(f\"Warning: Could not convert '{row[column_name]}' to float. Skipping this row.\")\n                    continue\n                except KeyError:\n                    print(f\"Error: Column '{column_name}' not found in CSV file.\")\n                    return None\n    except FileNotFoundError:\n        print(f\"Error: File not found at path: {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None\n    return total\n\n# Example usage:\nfile_path = 'orders.csv'\ncolumn_name = 'amount'\nresult = calculate_sum(file_path, column_name)\n\nif result is not None:\n    print(f\"The sum of the '{column_name}' column is: {result}\")",
    "examples": [
      "统计orders.csv里amount字段的总和",
      "Calculate the sum of the 'amount' column in the 'orders.csv' file.",
      "Calculate the sum of the 'price' column in the 'products.csv' file."
    ],
    "created_at": "2025-08-07T03:55:27.894612",
    "use_count": 0,
    "last_used": null
  }
}