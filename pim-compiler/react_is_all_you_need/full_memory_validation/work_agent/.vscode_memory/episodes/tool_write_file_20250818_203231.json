{
  "id": "tool_write_file_20250818_203231",
  "timestamp": "2025-08-18T20:32:31.680608",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "from flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\nfrom database import db\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(120), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    posts = db.relationship('Post', backref='author', lazy=True, cascade='all, delete-orphan')\n    comments = db.relationship('Comment', backref='author', lazy=True, cascade='all, delete-orphan')\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'created_at': self.created_at.isoformat()\n        }\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    comments = db.relationship('Comment', backref='post', lazy=True, cascade='all, delete-orphan')\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'title': self.title,\n            'content': self.content,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat(),\n            'author': self.author.username,\n            'author_id': self.user_id\n        }\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'content': self.content,\n            'created_at': self.created_at.isoformat(),\n            'author': self.author.username,\n            'author_id': self.user_id,\n            'post_id': self.post_id\n        }",
      "file_path": "webapp/backend/models.py"
    },
    "round": 4
  }
}