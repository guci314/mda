{
  "id": "tool_write_file_20250818_203259",
  "timestamp": "2025-08-18T20:32:59.773077",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "from flask import Flask, request, jsonify\nfrom flask_jwt_extended import JWTManager, create_access_token, get_jwt_identity\nimport jwt\nfrom models import User, Post, Comment\nfrom database import db\nfrom auth import token_required\nfrom config import Config\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n    \n    # 初始化数据库\n    db.init_app(app)\n    \n    # 初始化JWT\n    jwt = JWTManager(app)\n    \n    # 创建所有表\n    with app.app_context():\n        db.create_all()\n    \n    # 用户注册\n    @app.route('/api/register', methods=['POST'])\n    def register():\n        data = request.get_json()\n        \n        # 检查必需字段\n        if not data or not data.get('username') or not data.get('email') or not data.get('password'):\n            return jsonify({'message': 'Username, email, and password are required'}), 400\n        \n        # 检查用户是否已存在\n        if User.query.filter_by(username=data['username']).first():\n            return jsonify({'message': 'Username already exists'}), 400\n            \n        if User.query.filter_by(email=data['email']).first():\n            return jsonify({'message': 'Email already exists'}), 400\n        \n        # 创建新用户\n        user = User(username=data['username'], email=data['email'])\n        user.set_password(data['password'])\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        return jsonify({'message': 'User created successfully'}), 201\n    \n    # 用户登录\n    @app.route('/api/login', methods=['POST'])\n    def login():\n        data = request.get_json()\n        \n        if not data or not data.get('username') or not data.get('password'):\n            return jsonify({'message': 'Username and password are required'}), 400\n        \n        user = User.query.filter_by(username=data['username']).first()\n        \n        if not user or not user.check_password(data['password']):\n            return jsonify({'message': 'Invalid credentials'}), 401\n        \n        # 生成访问令牌\n        access_token = create_access_token(identity=user.id)\n        \n        return jsonify({\n            'access_token': access_token,\n            'user': user.to_dict()\n        }), 200\n    \n    # 获取当前用户信息\n    @app.route('/api/user', methods=['GET'])\n    @token_required\n    def get_user(current_user):\n        return jsonify(current_user.to_dict()), 200\n    \n    # 创建文章\n    @app.route('/api/posts', methods=['POST'])\n    @token_required\n    def create_post(current_user):\n        data = request.get_json()\n        \n        if not data or not data.get('title') or not data.get('content'):\n            return jsonify({'message': 'Title and content are required'}), 400\n        \n        post = Post(\n            title=data['title'],\n            content=data['content'],\n            author=current_user\n        )\n        \n        db.session.add(post)\n        db.session.commit()\n        \n        return jsonify(post.to_dict()), 201\n    \n    # 获取所有文章\n    @app.route('/api/posts', methods=['GET'])\n    def get_posts():\n        posts = Post.query.order_by(Post.created_at.desc()).all()\n        return jsonify([post.to_dict() for post in posts]), 200\n    \n    # 获取单篇文章\n    @app.route('/api/posts/<int:post_id>', methods=['GET'])\n    def get_post(post_id):\n        post = Post.query.get_or_404(post_id)\n        return jsonify(post.to_dict()), 200\n    \n    # 更新文章\n    @app.route('/api/posts/<int:post_id>', methods=['PUT'])\n    @token_required\n    def update_post(current_user, post_id):\n        post = Post.query.get_or_404(post_id)\n        \n        if post.author_id != current_user.id:\n            return jsonify({'message': 'Permission denied'}), 403\n        \n        data = request.get_json()\n        \n        if not data:\n            return jsonify({'message': 'No data provided'}), 400\n        \n        post.title = data.get('title', post.title)\n        post.content = data.get('content', post.content)\n        \n        db.session.commit()\n        \n        return jsonify(post.to_dict()), 200\n    \n    # 删除文章\n    @app.route('/api/posts/<int:post_id>', methods=['DELETE'])\n    @token_required\n    def delete_post(current_user, post_id):\n        post = Post.query.get_or_404(post_id)\n        \n        if post.author_id != current_user.id:\n            return jsonify({'message': 'Permission denied'}), 403\n        \n        db.session.delete(post)\n        db.session.commit()\n        \n        return jsonify({'message': 'Post deleted successfully'}), 200\n    \n    # 创建评论\n    @app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\n    @token_required\n    def create_comment(current_user, post_id):\n        post = Post.query.get_or_404(post_id)\n        \n        data = request.get_json()\n        \n        if not data or not data.get('content'):\n            return jsonify({'message': 'Content is required'}), 400\n        \n        comment = Comment(\n            content=data['content'],\n            author=current_user,\n            post=post\n        )\n        \n        db.session.add(comment)\n        db.session.commit()\n        \n        return jsonify(comment.to_dict()), 201\n    \n    # 获取文章的所有评论\n    @app.route('/api/posts/<int:post_id>/comments', methods=['GET'])\n    def get_comments(post_id):\n        post = Post.query.get_or_404(post_id)\n        comments = Comment.query.filter_by(post_id=post.id).order_by(Comment.created_at.asc()).all()\n        return jsonify([comment.to_dict() for comment in comments]), 200\n    \n    return app",
      "file_path": "webapp/backend/routes.py"
    },
    "round": 6
  }
}