{
  "id": "tool_write_file_20250818_185222",
  "timestamp": "2025-08-18T18:52:22.735304",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "test_processor.py",
      "content": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nfrom data_processor import DataProcessor\n\nclass TestDataProcessor(unittest.TestCase):\n    \"\"\"测试DataProcessor类\"\"\"\n    \n    def setUp(self):\n        \"\"\"测试前的准备工作\"\"\"\n        # 创建测试数据\n        self.test_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Charlie', 'Alice', 'David'],\n            'age': [25, 30, 35, 25, np.nan],\n            'city': ['New York', 'London', 'Paris', 'New York', 'Tokyo'],\n            'salary': [50000, 60000, 70000, 50000, 80000],\n            'department': ['IT', 'HR', 'Finance', 'IT', None]\n        })\n        \n        # 保存测试数据到CSV文件\n        self.test_file = 'test_data.csv'\n        self.test_data.to_csv(self.test_file, index=False)\n        \n        # 初始化数据处理器\n        self.processor = DataProcessor()\n    \n    def tearDown(self):\n        \"\"\"测试后的清理工作\"\"\"\n        # 删除测试文件\n        if os.path.exists(self.test_file):\n            os.remove(self.test_file)\n            \n        # 删除可能创建的输出文件\n        output_files = ['output.csv', 'cleaned_data.csv']\n        for file in output_files:\n            if os.path.exists(file):\n                os.remove(file)\n    \n    def test_load_csv_success(self):\n        \"\"\"测试成功加载CSV文件\"\"\"\n        # 测试加载数据\n        data = self.processor.load_csv(self.test_file)\n        \n        # 验证数据是否正确加载\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(data.shape, (5, 5))\n        self.assertEqual(list(data.columns), ['name', 'age', 'city', 'salary', 'department'])\n    \n    def test_load_csv_file_not_found(self):\n        \"\"\"测试文件未找到异常\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            self.processor.load_csv('non_existent_file.csv')\n    \n    def test_clean_data_remove_duplicates(self):\n        \"\"\"测试删除重复行功能\"\"\"\n        # 加载数据\n        self.processor.load_csv(self.test_file)\n        \n        # 清洗数据（删除重复行）\n        cleaned_data = self.processor.clean_data(remove_duplicates=True)\n        \n        # 验证重复行是否被删除（原始数据有2个Alice，应该只剩1个）\n        self.assertEqual(len(cleaned_data), 4)\n        self.assertEqual(cleaned_data['name'].tolist().count('Alice'), 1)\n    \n    def test_clean_data_drop_missing(self):\n        \"\"\"测试删除缺失值功能\"\"\"\n        # 加载数据\n        self.processor.load_csv(self.test_file)\n        \n        # 清洗数据（删除缺失值）\n        cleaned_data = self.processor.clean_data(handle_missing='drop')\n        \n        # 验证缺失值行是否被删除\n        self.assertEqual(len(cleaned_data), 3)  # 原始数据有2行缺失值\n        self.assertFalse(cleaned_data['age'].isnull().any())\n        self.assertFalse(cleaned_data['department'].isnull().any())\n    \n    def test_clean_data_fill_missing(self):\n        \"\"\"测试填充缺失值功能\"\"\"\n        # 加载数据\n        self.processor.load_csv(self.test_file)\n        \n        # 清洗数据（填充缺失值）\n        cleaned_data = self.processor.clean_data(\n            handle_missing='fill', \n            missing_value_replacement={'age': 0, 'department': 'Unknown'}\n        )\n        \n        # 验证缺失值是否被填充\n        self.assertEqual(cleaned_data.loc[cleaned_data['name'] == 'David', 'age'].iloc[0], 0)\n        self.assertEqual(cleaned_data.loc[cleaned_data['department'].isnull(), 'department'].iloc[0], 'Unknown')\n    \n    def test_clean_data_columns_selection(self):\n        \"\"\"测试列选择功能\"\"\"\n        # 加载数据\n        self.processor.load_csv(self.test_file)\n        \n        # 只清洗指定列\n        cleaned_data = self.processor.clean_data(\n            columns_to_clean=['name', 'city'],\n            remove_duplicates=True\n        )\n        \n        # 验证只有指定列被清洗（删除重复行）\n        self.assertEqual(len(cleaned_data), 4)\n        # 其他列的缺失值应该仍然存在\n        self.assertTrue(cleaned_data['department'].isnull().any())\n    \n    def test_get_data_info(self):\n        \"\"\"测试获取数据信息功能\"\"\"\n        # 加载数据\n        self.processor.load_csv(self.test_file)\n        \n        # 获取数据信息\n        info = self.processor.get_data_info()\n        \n        # 验证信息是否正确\n        self.assertIn('shape', info)\n        self.assertIn('columns', info)\n        self.assertIn('dtypes', info)\n        self.assertIn('missing_values', info)\n        self.assertIn('duplicates', info)\n        \n        self.assertEqual(info['shape'], (5, 5))\n        self.assertEqual(info['duplicates'], 1)  # 有一个重复行\n        self.assertEqual(info['missing_values']['age'], 1)  # 有一个缺失的age值\n        self.assertEqual(info['missing_values']['department'], 1)  # 有一个缺失的department值\n    \n    def test_save_to_csv(self):\n        \"\"\"测试保存数据到CSV功能\"\"\"\n        # 加载和清洗数据\n        self.processor.load_csv(self.test_file)\n        self.processor.clean_data()\n        \n        # 保存数据\n        output_file = 'output.csv'\n        self.processor.save_to_csv(output_file)\n        \n        # 验证文件是否创建\n        self.assertTrue(os.path.exists(output_file))\n        \n        # 验证保存的数据是否正确\n        saved_data = pd.read_csv(output_file)\n        self.assertEqual(len(saved_data), len(self.processor.data))\n\nif __name__ == '__main__':\n    # 运行测试\n    unittest.main()"
    },
    "round": 2
  }
}