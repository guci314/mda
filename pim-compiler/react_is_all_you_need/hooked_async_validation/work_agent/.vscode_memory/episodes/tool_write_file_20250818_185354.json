{
  "id": "tool_write_file_20250818_185354",
  "timestamp": "2025-08-18T18:53:54.662732",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "data_processor.py",
      "content": "import pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional\nimport logging\n\nclass DataProcessor:\n    \"\"\"\n    数据处理工具类，用于读取、清洗和处理CSV数据\n    \"\"\"\n    \n    def __init__(self):\n        \"\"\"初始化数据处理器\"\"\"\n        self.data = None\n        self.logger = logging.getLogger(__name__)\n        \n    def read_csv(self, file_path: str, **kwargs) -> pd.DataFrame:\n        \"\"\"\n        读取CSV文件\n        \n        Args:\n            file_path (str): CSV文件路径\n            **kwargs: 传递给pandas.read_csv的其他参数\n            \n        Returns:\n            pd.DataFrame: 读取的数据\n            \n        Raises:\n            FileNotFoundError: 文件未找到\n            pd.errors.EmptyDataError: 文件为空\n            pd.errors.ParserError: 解析错误\n        \"\"\"\n        try:\n            self.data = pd.read_csv(file_path, **kwargs)\n            self.logger.info(f\"成功读取文件: {file_path}\")\n            return self.data\n        except FileNotFoundError:\n            self.logger.error(f\"文件未找到: {file_path}\")\n            raise\n        except pd.errors.EmptyDataError:\n            self.logger.error(f\"文件为空: {file_path}\")\n            raise\n        except pd.errors.ParserError as e:\n            self.logger.error(f\"解析CSV文件时出错: {file_path}, 错误: {str(e)}\")\n            raise\n        except Exception as e:\n            self.logger.error(f\"读取文件时发生未知错误: {file_path}, 错误: {str(e)}\")\n            raise\n    \n    def clean_data(self, \n                   remove_duplicates: bool = True,\n                   handle_missing_values: str = 'drop',\n                   missing_value_columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"\n        清洗数据\n        \n        Args:\n            remove_duplicates (bool): 是否删除重复行\n            handle_missing_values (str): 处理缺失值的方式 ('drop', 'fill_mean', 'fill_median', 'fill_mode')\n            missing_value_columns (List[str], optional): 需要处理缺失值的列，如果为None则处理所有列\n            \n        Returns:\n            pd.DataFrame: 清洗后的数据\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"没有数据可清洗，请先调用read_csv方法\")\n            \n        cleaned_data = self.data.copy()\n        \n        # 删除重复行\n        if remove_duplicates:\n            original_rows = len(cleaned_data)\n            cleaned_data = cleaned_data.drop_duplicates()\n            removed_rows = original_rows - len(cleaned_data)\n            if removed_rows > 0:\n                self.logger.info(f\"删除了 {removed_rows} 行重复数据\")\n        \n        # 处理缺失值\n        if handle_missing_values != 'ignore':\n            if missing_value_columns is None:\n                missing_value_columns = cleaned_data.columns.tolist()\n                \n            for column in missing_value_columns:\n                if column not in cleaned_data.columns:\n                    self.logger.warning(f\"列 {column} 不存在于数据中\")\n                    continue\n                    \n                if cleaned_data[column].isnull().any():\n                    if handle_missing_values == 'drop':\n                        cleaned_data = cleaned_data.dropna(subset=[column])\n                        self.logger.info(f\"删除了列 {column} 中包含缺失值的行\")\n                    elif handle_missing_values == 'fill_mean' and pd.api.types.is_numeric_dtype(cleaned_data[column]):\n                        mean_value = cleaned_data[column].mean()\n                        cleaned_data[column].fillna(mean_value, inplace=True)\n                        self.logger.info(f\"用均值 {mean_value} 填充了列 {column} 中的缺失值\")\n                    elif handle_missing_values == 'fill_median' and pd.api.types.is_numeric_dtype(cleaned_data[column]):\n                        median_value = cleaned_data[column].median()\n                        cleaned_data[column].fillna(median_value, inplace=True)\n                        self.logger.info(f\"用中位数 {median_value} 填充了列 {column} 中的缺失值\")\n                    elif handle_missing_values == 'fill_mode':\n                        mode_value = cleaned_data[column].mode()\n                        if not mode_value.empty:\n                            cleaned_data[column].fillna(mode_value[0], inplace=True)\n                            self.logger.info(f\"用众数 {mode_value[0]} 填充了列 {column} 中的缺失值\")\n        \n        self.data = cleaned_data\n        return self.data\n    \n    def get_data_info(self) -> Dict[str, Any]:\n        \"\"\"\n        获取数据信息\n        \n        Returns:\n            Dict[str, Any]: 包含数据信息的字典\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"没有数据，请先调用read_csv方法\")\n            \n        info = {\n            'shape': self.data.shape,\n            'columns': self.data.columns.tolist(),\n            'dtypes': self.data.dtypes.to_dict(),\n            'missing_values': self.data.isnull().sum().to_dict(),\n            'duplicate_rows': self.data.duplicated().sum()\n        }\n        return info\n    \n    def filter_data(self, conditions: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"\n        根据条件过滤数据\n        \n        Args:\n            conditions (Dict[str, Any]): 过滤条件，格式为 {column: value} 或 {column: [values]}\n            \n        Returns:\n            pd.DataFrame: 过滤后的数据\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"没有数据，请先调用read_csv方法\")\n            \n        filtered_data = self.data.copy()\n        \n        for column, value in conditions.items():\n            if column not in filtered_data.columns:\n                self.logger.warning(f\"列 {column} 不存在于数据中\")\n                continue\n                \n            if isinstance(value, list):\n                filtered_data = filtered_data[filtered_data[column].isin(value)]\n            else:\n                filtered_data = filtered_data[filtered_data[column] == value]\n                \n        self.data = filtered_data\n        return self.data\n    \n    def get_data(self) -> pd.DataFrame:\n        \"\"\"\n        获取当前数据\n        \n        Returns:\n            pd.DataFrame: 当前数据\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"没有数据，请先调用read_csv方法\")\n        return self.data\n\nif __name__ == \"__main__\":\n    # 简单测试\n    processor = DataProcessor()\n    print(\"DataProcessor 类已创建\")"
    },
    "round": 1
  }
}