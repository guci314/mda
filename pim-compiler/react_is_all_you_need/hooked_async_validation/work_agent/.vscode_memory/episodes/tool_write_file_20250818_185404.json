{
  "id": "tool_write_file_20250818_185404",
  "timestamp": "2025-08-18T18:54:04.246507",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "test_processor.py",
      "content": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nimport tempfile\nfrom data_processor import DataProcessor\n\nclass TestDataProcessor(unittest.TestCase):\n    \"\"\"测试DataProcessor类\"\"\"\n    \n    def setUp(self):\n        \"\"\"测试前的准备工作\"\"\"\n        # 创建临时CSV文件用于测试\n        self.temp_dir = tempfile.mkdtemp()\n        self.test_csv_path = os.path.join(self.temp_dir, \"test_data.csv\")\n        \n        # 创建测试数据\n        self.test_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Charlie', 'Alice', 'David'],\n            'age': [25, 30, 35, 25, np.nan],\n            'city': ['New York', 'London', 'Paris', 'New York', 'Tokyo'],\n            'salary': [50000, 60000, np.nan, 50000, 80000]\n        })\n        self.test_data.to_csv(self.test_csv_path, index=False)\n        \n        # 创建数据处理器实例\n        self.processor = DataProcessor()\n    \n    def tearDown(self):\n        \"\"\"测试后的清理工作\"\"\"\n        # 删除临时文件\n        if os.path.exists(self.test_csv_path):\n            os.remove(self.test_csv_path)\n        os.rmdir(self.temp_dir)\n    \n    def test_read_csv(self):\n        \"\"\"测试读取CSV功能\"\"\"\n        # 正常读取\n        data = self.processor.read_csv(self.test_csv_path)\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(len(data), 5)\n        self.assertEqual(list(data.columns), ['name', 'age', 'city', 'salary'])\n        \n        # 测试文件不存在的情况\n        with self.assertRaises(FileNotFoundError):\n            self.processor.read_csv(\"non_existent_file.csv\")\n    \n    def test_clean_data_remove_duplicates(self):\n        \"\"\"测试删除重复行功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        \n        # 删除重复行前\n        original_rows = len(self.processor.get_data())\n        \n        # 删除重复行后\n        cleaned_data = self.processor.clean_data(remove_duplicates=True)\n        \n        # 应该删除一行重复数据\n        self.assertEqual(len(cleaned_data), original_rows - 1)\n        self.assertEqual(cleaned_data.duplicated().sum(), 0)\n    \n    def test_clean_data_handle_missing_values_drop(self):\n        \"\"\"测试删除缺失值功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        \n        # 删除前应该有缺失值\n        self.assertTrue(self.processor.get_data().isnull().any().any())\n        \n        # 删除缺失值后\n        cleaned_data = self.processor.clean_data(\n            remove_duplicates=False, \n            handle_missing_values='drop'\n        )\n        \n        # 应该没有缺失值了\n        self.assertFalse(cleaned_data.isnull().any().any())\n        # 应该删除了2行包含缺失值的数据\n        self.assertEqual(len(cleaned_data), 3)\n    \n    def test_clean_data_handle_missing_values_fill_mean(self):\n        \"\"\"测试用均值填充缺失值功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        \n        # 获取原始缺失值数量\n        original_missing = self.processor.get_data()['age'].isnull().sum()\n        \n        # 用均值填充\n        cleaned_data = self.processor.clean_data(\n            remove_duplicates=False,\n            handle_missing_values='fill_mean',\n            missing_value_columns=['age']\n        )\n        \n        # age列应该没有缺失值了\n        self.assertEqual(cleaned_data['age'].isnull().sum(), 0)\n        # 填充的值应该是均值\n        expected_mean = self.test_data['age'].mean()\n        self.assertEqual(cleaned_data.loc[4, 'age'], expected_mean)\n    \n    def test_get_data_info(self):\n        \"\"\"测试获取数据信息功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        info = self.processor.get_data_info()\n        \n        # 检查返回的信息是否完整\n        self.assertIn('shape', info)\n        self.assertIn('columns', info)\n        self.assertIn('dtypes', info)\n        self.assertIn('missing_values', info)\n        self.assertIn('duplicate_rows', info)\n        \n        # 检查具体值\n        self.assertEqual(info['shape'], (5, 4))\n        self.assertEqual(info['duplicate_rows'], 1)\n        self.assertEqual(info['missing_values']['age'], 1)\n        self.assertEqual(info['missing_values']['salary'], 1)\n    \n    def test_filter_data(self):\n        \"\"\"测试数据过滤功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        \n        # 过滤数据\n        filtered_data = self.processor.filter_data({'city': 'New York'})\n        \n        # 检查过滤结果\n        self.assertEqual(len(filtered_data), 2)\n        self.assertTrue((filtered_data['city'] == 'New York').all())\n        \n        # 测试多值过滤\n        filtered_data2 = self.processor.filter_data({'city': ['New York', 'London']})\n        self.assertEqual(len(filtered_data2), 3)\n    \n    def test_get_data(self):\n        \"\"\"测试获取数据功能\"\"\"\n        self.processor.read_csv(self.test_csv_path)\n        data = self.processor.get_data()\n        \n        # 检查返回的数据是否正确\n        self.assertIsInstance(data, pd.DataFrame)\n        pd.testing.assert_frame_equal(data, self.test_data)\n        \n        # 测试没有数据时的情况\n        empty_processor = DataProcessor()\n        with self.assertRaises(ValueError):\n            empty_processor.get_data()\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    "round": 2
  }
}