{
  "id": "tool_write_file_20250818_185524",
  "timestamp": "2025-08-18T18:55:24.003138",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nimport tempfile\nfrom data_processor import DataProcessor\n\nclass TestDataProcessor(unittest.TestCase):\n    \"\"\"\n    DataProcessor类的测试用例\n    \"\"\"\n    \n    def setUp(self):\n        \"\"\"\n        测试前的准备工作\n        \"\"\"\n        # 创建临时CSV文件用于测试\n        self.temp_dir = tempfile.mkdtemp()\n        self.test_file = os.path.join(self.temp_dir, 'test_data.csv')\n        \n        # 创建测试数据\n        test_data = {\n            'name': ['Alice', 'Bob', 'Charlie', 'Alice', 'David', None],\n            'age': [25, 30, np.nan, 25, 35, 28],\n            'city': ['New York', 'London', 'Paris', 'New York', None, 'Tokyo'],\n            'salary': [50000, 60000, 70000, 50000, 80000, 55000]\n        }\n        \n        self.df = pd.DataFrame(test_data)\n        self.df.to_csv(self.test_file, index=False)\n        \n        # 创建空文件用于测试\n        self.empty_file = os.path.join(self.temp_dir, 'empty.csv')\n        with open(self.empty_file, 'w') as f:\n            pass\n            \n        # 创建格式错误的文件用于测试\n        self.malformed_file = os.path.join(self.temp_dir, 'malformed.csv')\n        with open(self.malformed_file, 'w') as f:\n            f.write(\"name,age,city\\nAlice,25,New York\\nBob,30\")\n    \n    def tearDown(self):\n        \"\"\"\n        测试后的清理工作\n        \"\"\"\n        # 清理临时文件\n        if os.path.exists(self.test_file):\n            os.remove(self.test_file)\n        if os.path.exists(self.empty_file):\n            os.remove(self.empty_file)\n        if os.path.exists(self.malformed_file):\n            os.remove(self.malformed_file)\n        os.rmdir(self.temp_dir)\n    \n    def test_init(self):\n        \"\"\"\n        测试初始化\n        \"\"\"\n        processor = DataProcessor()\n        self.assertIsNone(processor.file_path)\n        self.assertIsNone(processor.data)\n        \n        processor = DataProcessor(self.test_file)\n        self.assertEqual(processor.file_path, self.test_file)\n    \n    def test_load_csv_success(self):\n        \"\"\"\n        测试成功加载CSV文件\n        \"\"\"\n        processor = DataProcessor()\n        data = processor.load_csv(self.test_file)\n        \n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(data.shape, (6, 4))\n        self.assertEqual(list(data.columns), ['name', 'age', 'city', 'salary'])\n    \n    def test_load_csv_no_file_path(self):\n        \"\"\"\n        测试未提供文件路径时的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(ValueError):\n            processor.load_csv()\n    \n    def test_load_csv_file_not_found(self):\n        \"\"\"\n        测试文件未找到时的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(FileNotFoundError):\n            processor.load_csv('non_existent_file.csv')\n    \n    def test_load_csv_empty_file(self):\n        \"\"\"\n        测试空文件时的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(pd.errors.EmptyDataError):\n            processor.load_csv(self.empty_file)\n    \n    def test_clean_data_success(self):\n        \"\"\"\n        测试数据清洗功能\n        \"\"\"\n        processor = DataProcessor()\n        processor.load_csv(self.test_file)\n        \n        # 测试移除重复行\n        cleaned_data = processor.clean_data(remove_duplicates=True, handle_missing='ignore')\n        self.assertEqual(len(cleaned_data), 5)  # 原始6行，移除1行重复\n        \n        # 测试处理缺失值 - 删除\n        processor.load_csv(self.test_file)  # 重新加载原始数据\n        cleaned_data = processor.clean_data(remove_duplicates=False, handle_missing='drop')\n        self.assertEqual(len(cleaned_data), 4)  # 原始6行，删除2行有缺失值的行\n        \n        # 测试处理缺失值 - 填充\n        processor.load_csv(self.test_file)  # 重新加载原始数据\n        cleaned_data = processor.clean_data(remove_duplicates=False, handle_missing='fill')\n        self.assertEqual(len(cleaned_data), 6)  # 保持所有行\n        # 检查缺失值是否被填充\n        self.assertFalse(cleaned_data['name'].isnull().any())\n        self.assertFalse(cleaned_data['city'].isnull().any())\n    \n    def test_clean_data_no_data_loaded(self):\n        \"\"\"\n        测试未加载数据时清洗的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(ValueError):\n            processor.clean_data()\n    \n    def test_get_data_info(self):\n        \"\"\"\n        测试获取数据信息功能\n        \"\"\"\n        processor = DataProcessor()\n        processor.load_csv(self.test_file)\n        \n        info = processor.get_data_info()\n        \n        self.assertIn('shape', info)\n        self.assertIn('columns', info)\n        self.assertIn('missing_values', info)\n        self.assertIn('data_types', info)\n        self.assertIn('duplicate_rows', info)\n        \n        self.assertEqual(info['shape'], (6, 4))\n        self.assertEqual(info['duplicate_rows'], 1)\n    \n    def test_get_data_info_no_data_loaded(self):\n        \"\"\"\n        测试未加载数据时获取信息的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(ValueError):\n            processor.get_data_info()\n    \n    def test_save_to_csv(self):\n        \"\"\"\n        测试保存数据到CSV文件\n        \"\"\"\n        processor = DataProcessor()\n        processor.load_csv(self.test_file)\n        \n        # 清洗数据\n        processor.clean_data()\n        \n        # 保存到新文件\n        output_file = os.path.join(self.temp_dir, 'output.csv')\n        processor.save_to_csv(output_file)\n        \n        # 验证文件已创建\n        self.assertTrue(os.path.exists(output_file))\n        \n        # 验证保存的数据\n        saved_data = pd.read_csv(output_file)\n        self.assertEqual(len(saved_data), len(processor.data))\n    \n    def test_save_to_csv_no_data(self):\n        \"\"\"\n        测试没有数据时保存的异常处理\n        \"\"\"\n        processor = DataProcessor()\n        with self.assertRaises(ValueError):\n            processor.save_to_csv('output.csv')\n\nif __name__ == '__main__':\n    unittest.main()",
      "file_path": "test_processor.py"
    },
    "round": 3
  }
}