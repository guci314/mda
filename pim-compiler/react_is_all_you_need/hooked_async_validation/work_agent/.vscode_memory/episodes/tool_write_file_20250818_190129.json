{
  "id": "tool_write_file_20250818_190129",
  "timestamp": "2025-08-18T19:01:29.007386",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "data_processor.py",
      "content": "import pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional\nimport logging\n\nclass DataProcessor:\n    \"\"\"\n    数据处理类，用于处理CSV文件和执行数据清洗操作\n    \"\"\"\n    \n    def __init__(self):\n        \"\"\"初始化数据处理器\"\"\"\n        self.data = None\n        self.logger = logging.getLogger(__name__)\n        \n    def load_csv(self, file_path: str) -> pd.DataFrame:\n        \"\"\"\n        读取CSV文件\n        \n        Args:\n            file_path (str): CSV文件路径\n            \n        Returns:\n            pd.DataFrame: 读取的数据框\n            \n        Raises:\n            FileNotFoundError: 文件不存在\n            pd.errors.EmptyDataError: 文件为空\n            pd.errors.ParserError: 解析错误\n        \"\"\"\n        try:\n            self.data = pd.read_csv(file_path)\n            self.logger.info(f\"成功加载CSV文件: {file_path}\")\n            return self.data\n        except FileNotFoundError:\n            self.logger.error(f\"文件未找到: {file_path}\")\n            raise\n        except pd.errors.EmptyDataError:\n            self.logger.error(f\"CSV文件为空: {file_path}\")\n            raise\n        except pd.errors.ParserError:\n            self.logger.error(f\"CSV文件解析错误: {file_path}\")\n            raise\n        except Exception as e:\n            self.logger.error(f\"加载CSV文件时发生未知错误: {str(e)}\")\n            raise\n    \n    def remove_duplicates(self) -> pd.DataFrame:\n        \"\"\"\n        删除重复行\n        \n        Returns:\n            pd.DataFrame: 去重后的数据框\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用load_csv方法\")\n            \n        original_count = len(self.data)\n        self.data = self.data.drop_duplicates()\n        removed_count = original_count - len(self.data)\n        self.logger.info(f\"删除了 {removed_count} 个重复行\")\n        return self.data\n    \n    def handle_missing_values(self, strategy: str = 'drop', \n                             columns: Optional[List[str]] = None,\n                             fill_value: Any = None) -> pd.DataFrame:\n        \"\"\"\n        处理缺失值\n        \n        Args:\n            strategy (str): 处理策略 ('drop', 'fill')\n            columns (List[str], optional): 要处理的列名列表，默认为所有列\n            fill_value (Any, optional): 填充值，仅在strategy='fill'时使用\n            \n        Returns:\n            pd.DataFrame: 处理缺失值后的数据框\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用load_csv方法\")\n            \n        if columns is None:\n            columns = self.data.columns.tolist()\n            \n        if strategy == 'drop':\n            original_count = len(self.data)\n            self.data = self.data.dropna(subset=columns)\n            dropped_count = original_count - len(self.data)\n            self.logger.info(f\"删除了 {dropped_count} 个包含缺失值的行\")\n        elif strategy == 'fill':\n            if fill_value is not None:\n                self.data[columns] = self.data[columns].fillna(fill_value)\n                self.logger.info(f\"用 {fill_value} 填充了缺失值\")\n            else:\n                # 默认使用前向填充\n                self.data[columns] = self.data[columns].fillna(method='ffill')\n                self.logger.info(\"使用前向填充处理了缺失值\")\n        else:\n            raise ValueError(\"strategy参数必须是 'drop' 或 'fill'\")\n            \n        return self.data\n    \n    def filter_data(self, condition: Dict[str, Any]) -> pd.DataFrame:\n        \"\"\"\n        根据条件过滤数据\n        \n        Args:\n            condition (Dict[str, Any]): 过滤条件，格式为 {列名: 值} 或 {列名: [值列表]}\n            \n        Returns:\n            pd.DataFrame: 过滤后的数据框\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用load_csv方法\")\n            \n        filtered_data = self.data.copy()\n        \n        for column, value in condition.items():\n            if column not in self.data.columns:\n                self.logger.warning(f\"列 {column} 不存在于数据中\")\n                continue\n                \n            if isinstance(value, list):\n                filtered_data = filtered_data[filtered_data[column].isin(value)]\n            else:\n                filtered_data = filtered_data[filtered_data[column] == value]\n                \n        self.data = filtered_data\n        self.logger.info(f\"根据条件过滤数据，剩余 {len(self.data)} 行\")\n        return self.data\n    \n    def get_data_info(self) -> Dict[str, Any]:\n        \"\"\"\n        获取数据基本信息\n        \n        Returns:\n            Dict[str, Any]: 数据信息字典\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用load_csv方法\")\n            \n        info = {\n            'shape': self.data.shape,\n            'columns': self.data.columns.tolist(),\n            'missing_values': self.data.isnull().sum().to_dict(),\n            'data_types': self.data.dtypes.to_dict(),\n            'duplicate_rows': self.data.duplicated().sum()\n        }\n        \n        return info\n    \n    def get_data(self) -> pd.DataFrame:\n        \"\"\"\n        获取当前数据\n        \n        Returns:\n            pd.DataFrame: 当前数据框\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用load_csv方法\")\n        return self.data.copy()"
    },
    "round": 1
  }
}