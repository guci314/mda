{
  "id": "tool_write_file_20250818_192201",
  "timestamp": "2025-08-18T19:22:01.258429",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "data_processor.py",
      "content": "import pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional\nimport logging\n\nclass DataProcessor:\n    \"\"\"\n    数据处理工具类，用于处理CSV数据，包括读取和清洗功能\n    \"\"\"\n    \n    def __init__(self):\n        \"\"\"初始化数据处理器\"\"\"\n        self.data = None\n        self.logger = self._setup_logger()\n    \n    def _setup_logger(self) -> logging.Logger:\n        \"\"\"设置日志记录器\"\"\"\n        logger = logging.getLogger(__name__)\n        logger.setLevel(logging.INFO)\n        if not logger.handlers:\n            handler = logging.StreamHandler()\n            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n            handler.setFormatter(formatter)\n            logger.addHandler(handler)\n        return logger\n    \n    def read_csv(self, file_path: str) -> pd.DataFrame:\n        \"\"\"\n        读取CSV文件\n        \n        Args:\n            file_path (str): CSV文件路径\n            \n        Returns:\n            pd.DataFrame: 读取的数据\n            \n        Raises:\n            FileNotFoundError: 文件未找到\n            pd.errors.EmptyDataError: 文件为空\n            pd.errors.ParserError: 解析错误\n        \"\"\"\n        try:\n            self.data = pd.read_csv(file_path)\n            self.logger.info(f\"成功读取CSV文件: {file_path}\")\n            self.logger.info(f\"数据形状: {self.data.shape}\")\n            return self.data\n        except FileNotFoundError:\n            self.logger.error(f\"文件未找到: {file_path}\")\n            raise\n        except pd.errors.EmptyDataError:\n            self.logger.error(f\"文件为空: {file_path}\")\n            raise\n        except pd.errors.ParserError:\n            self.logger.error(f\"CSV解析错误: {file_path}\")\n            raise\n        except Exception as e:\n            self.logger.error(f\"读取CSV时发生未知错误: {str(e)}\")\n            raise\n    \n    def clean_data(self, \n                   remove_duplicates: bool = True,\n                   handle_missing: str = 'drop',\n                   remove_columns: Optional[List[str]] = None) -> pd.DataFrame:\n        \"\"\"\n        清洗数据\n        \n        Args:\n            remove_duplicates (bool): 是否删除重复行，默认True\n            handle_missing (str): 处理缺失值的方式 ('drop', 'fill_mean', 'fill_median', 'fill_zero')\n            remove_columns (List[str], optional): 要删除的列名列表\n            \n        Returns:\n            pd.DataFrame: 清洗后的数据\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用read_csv方法\")\n        \n        cleaned_data = self.data.copy()\n        self.logger.info(\"开始数据清洗...\")\n        \n        # 删除指定列\n        if remove_columns:\n            existing_columns = [col for col in remove_columns if col in cleaned_data.columns]\n            if existing_columns:\n                cleaned_data = cleaned_data.drop(columns=existing_columns)\n                self.logger.info(f\"删除列: {existing_columns}\")\n            missing_columns = [col for col in remove_columns if col not in cleaned_data.columns]\n            if missing_columns:\n                self.logger.warning(f\"以下列不存在，无法删除: {missing_columns}\")\n        \n        # 删除重复行\n        if remove_duplicates:\n            initial_rows = cleaned_data.shape[0]\n            cleaned_data = cleaned_data.drop_duplicates()\n            removed_rows = initial_rows - cleaned_data.shape[0]\n            if removed_rows > 0:\n                self.logger.info(f\"删除了 {removed_rows} 行重复数据\")\n        \n        # 处理缺失值\n        if handle_missing == 'drop':\n            initial_rows = cleaned_data.shape[0]\n            cleaned_data = cleaned_data.dropna()\n            removed_rows = initial_rows - cleaned_data.shape[0]\n            if removed_rows > 0:\n                self.logger.info(f\"删除了 {removed_rows} 行包含缺失值的数据\")\n        elif handle_missing in ['fill_mean', 'fill_median', 'fill_zero']:\n            numeric_columns = cleaned_data.select_dtypes(include=[np.number]).columns\n            if len(numeric_columns) > 0:\n                if handle_missing == 'fill_mean':\n                    cleaned_data[numeric_columns] = cleaned_data[numeric_columns].fillna(\n                        cleaned_data[numeric_columns].mean()\n                    )\n                    self.logger.info(\"使用均值填充数值列的缺失值\")\n                elif handle_missing == 'fill_median':\n                    cleaned_data[numeric_columns] = cleaned_data[numeric_columns].fillna(\n                        cleaned_data[numeric_columns].median()\n                    )\n                    self.logger.info(\"使用中位数填充数值列的缺失值\")\n                elif handle_missing == 'fill_zero':\n                    cleaned_data[numeric_columns] = cleaned_data[numeric_columns].fillna(0)\n                    self.logger.info(\"使用0填充数值列的缺失值\")\n        \n        self.logger.info(f\"清洗完成，最终数据形状: {cleaned_data.shape}\")\n        self.data = cleaned_data\n        return cleaned_data\n    \n    def get_data_info(self) -> Dict[str, Any]:\n        \"\"\"\n        获取数据信息\n        \n        Returns:\n            Dict[str, Any]: 数据信息字典\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用read_csv方法\")\n        \n        info = {\n            'shape': self.data.shape,\n            'columns': list(self.data.columns),\n            'missing_values': self.data.isnull().sum().to_dict(),\n            'data_types': self.data.dtypes.to_dict(),\n            'duplicate_rows': self.data.duplicated().sum()\n        }\n        return info\n    \n    def save_data(self, file_path: str, index: bool = False) -> None:\n        \"\"\"\n        保存数据到CSV文件\n        \n        Args:\n            file_path (str): 保存文件路径\n            index (bool): 是否保存索引，默认False\n        \"\"\"\n        if self.data is None:\n            raise ValueError(\"数据未加载，请先调用read_csv方法\")\n        \n        self.data.to_csv(file_path, index=index)\n        self.logger.info(f\"数据已保存到: {file_path}\")\n\n# 使用示例\nif __name__ == \"__main__\":\n    # 创建示例数据\n    sample_data = pd.DataFrame({\n        'name': ['Alice', 'Bob', 'Charlie', 'Alice', None],\n        'age': [25, 30, 35, 25, np.nan],\n        'city': ['New York', 'London', 'Paris', 'New York', 'Tokyo'],\n        'salary': [50000, 60000, np.nan, 50000, 70000]\n    })\n    sample_data.to_csv('sample_data.csv', index=False)\n    \n    # 使用数据处理器\n    processor = DataProcessor()\n    data = processor.read_csv('sample_data.csv')\n    print(\"原始数据:\")\n    print(data)\n    \n    # 清洗数据\n    cleaned_data = processor.clean_data(\n        remove_duplicates=True,\n        handle_missing='fill_mean'\n    )\n    print(\"\\n清洗后的数据:\")\n    print(cleaned_data)\n    \n    # 获取数据信息\n    info = processor.get_data_info()\n    print(\"\\n数据信息:\")\n    for key, value in info.items():\n        print(f\"{key}: {value}\")"
    },
    "round": 1
  }
}