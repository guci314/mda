{
  "id": "tool_write_file_20250818_192221",
  "timestamp": "2025-08-18T19:22:21.845924",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "test_processor.py",
      "content": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nfrom data_processor import DataProcessor\n\nclass TestDataProcessor(unittest.TestCase):\n    \"\"\"测试数据处理器类\"\"\"\n    \n    def setUp(self):\n        \"\"\"测试前准备\"\"\"\n        # 创建测试数据\n        self.test_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Charlie', 'Alice', None, 'David'],\n            'age': [25, 30, 35, 25, np.nan, 28],\n            'city': ['New York', 'London', 'Paris', 'New York', 'Tokyo', 'Berlin'],\n            'salary': [50000, 60000, np.nan, 50000, 70000, 55000]\n        })\n        self.test_data.to_csv('test_data.csv', index=False)\n        self.processor = DataProcessor()\n    \n    def tearDown(self):\n        \"\"\"测试后清理\"\"\"\n        # 删除测试文件\n        if os.path.exists('test_data.csv'):\n            os.remove('test_data.csv')\n        if os.path.exists('output_data.csv'):\n            os.remove('output_data.csv')\n    \n    def test_read_csv_success(self):\n        \"\"\"测试成功读取CSV文件\"\"\"\n        data = self.processor.read_csv('test_data.csv')\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(data.shape, (6, 4))\n        self.assertEqual(list(data.columns), ['name', 'age', 'city', 'salary'])\n    \n    def test_read_csv_file_not_found(self):\n        \"\"\"测试读取不存在的文件\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            self.processor.read_csv('non_existent_file.csv')\n    \n    def test_clean_data_remove_duplicates(self):\n        \"\"\"测试删除重复行\"\"\"\n        self.processor.read_csv('test_data.csv')\n        # 检查原始数据是否有重复\n        original_shape = self.processor.data.shape\n        cleaned_data = self.processor.clean_data(remove_duplicates=True)\n        \n        # 原始数据中有一行重复 (Alice, 25, New York, 50000)\n        # 但因为salary有NaN，所以实际不会被认为是完全重复\n        # 我们手动创建一个完全重复的测试\n        duplicate_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Alice'],\n            'age': [25, 30, 25],\n            'city': ['New York', 'London', 'New York'],\n            'salary': [50000, 60000, 50000]\n        })\n        duplicate_data.to_csv('duplicate_test.csv', index=False)\n        \n        processor2 = DataProcessor()\n        processor2.read_csv('duplicate_test.csv')\n        cleaned_data2 = processor2.clean_data(remove_duplicates=True)\n        \n        # 3行应该变成2行\n        self.assertEqual(cleaned_data2.shape[0], 2)\n        \n        # 清理临时文件\n        os.remove('duplicate_test.csv')\n    \n    def test_clean_data_drop_missing(self):\n        \"\"\"测试删除缺失值\"\"\"\n        self.processor.read_csv('test_data.csv')\n        original_rows = self.processor.data.shape[0]\n        cleaned_data = self.processor.clean_data(handle_missing='drop')\n        \n        # 原始数据有2行包含NaN (name和age的NaN, salary的NaN)\n        self.assertEqual(cleaned_data.shape[0], original_rows - 2)\n    \n    def test_clean_data_fill_mean(self):\n        \"\"\"测试用均值填充缺失值\"\"\"\n        self.processor.read_csv('test_data.csv')\n        cleaned_data = self.processor.clean_data(handle_missing='fill_mean')\n        \n        # 检查数值列的NaN是否被填充\n        self.assertFalse(cleaned_data['age'].isnull().any())\n        self.assertFalse(cleaned_data['salary'].isnull().any())\n        \n        # 检查是否用均值填充\n        age_mean = self.test_data['age'].mean()\n        salary_mean = self.test_data['salary'].mean()\n        \n        # 找到原始NaN的位置\n        age_nan_index = self.test_data['age'].isnull()\n        salary_nan_index = self.test_data['salary'].isnull()\n        \n        # 验证这些位置现在被填充为均值\n        if age_nan_index.any():\n            self.assertAlmostEqual(\n                cleaned_data.loc[age_nan_index, 'age'].iloc[0], \n                age_mean, \n                places=10\n            )\n    \n    def test_clean_data_remove_columns(self):\n        \"\"\"测试删除指定列\"\"\"\n        self.processor.read_csv('test_data.csv')\n        cleaned_data = self.processor.clean_data(\n            remove_columns=['city', 'non_existent_column']\n        )\n        \n        # 检查city列是否被删除\n        self.assertNotIn('city', cleaned_data.columns)\n        # 检查其他列是否还在\n        self.assertIn('name', cleaned_data.columns)\n        self.assertIn('age', cleaned_data.columns)\n        self.assertIn('salary', cleaned_data.columns)\n    \n    def test_get_data_info(self):\n        \"\"\"测试获取数据信息\"\"\"\n        self.processor.read_csv('test_data.csv')\n        info = self.processor.get_data_info()\n        \n        self.assertIn('shape', info)\n        self.assertIn('columns', info)\n        self.assertIn('missing_values', info)\n        self.assertIn('data_types', info)\n        self.assertIn('duplicate_rows', info)\n        \n        self.assertEqual(info['shape'], (6, 4))\n        self.assertEqual(len(info['columns']), 4)\n    \n    def test_save_data(self):\n        \"\"\"测试保存数据\"\"\"\n        self.processor.read_csv('test_data.csv')\n        self.processor.save_data('output_data.csv')\n        \n        # 检查文件是否创建\n        self.assertTrue(os.path.exists('output_data.csv'))\n        \n        # 读取保存的文件验证内容\n        saved_data = pd.read_csv('output_data.csv')\n        pd.testing.assert_frame_equal(\n            saved_data.reset_index(drop=True), \n            self.processor.data.reset_index(drop=True)\n        )\n\nif __name__ == '__main__':\n    # 运行测试\n    unittest.main(verbosity=2)"
    },
    "round": 2
  }
}