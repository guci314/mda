{
  "id": "tool_write_file_20250818_192239",
  "timestamp": "2025-08-18T19:22:39.984822",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "import unittest\nimport pandas as pd\nimport numpy as np\nimport os\nfrom data_processor import DataProcessor\n\nclass TestDataProcessor(unittest.TestCase):\n    \"\"\"测试数据处理器类\"\"\"\n    \n    def setUp(self):\n        \"\"\"测试前准备\"\"\"\n        # 创建测试数据\n        self.test_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Charlie', 'Alice', None, 'David'],\n            'age': [25, 30, 35, 25, np.nan, 28],\n            'city': ['New York', 'London', 'Paris', 'New York', 'Tokyo', 'Berlin'],\n            'salary': [50000, 60000, np.nan, 50000, 70000, 55000]\n        })\n        self.test_data.to_csv('test_data.csv', index=False)\n        self.processor = DataProcessor()\n    \n    def tearDown(self):\n        \"\"\"测试后清理\"\"\"\n        # 删除测试文件\n        files_to_remove = ['test_data.csv', 'output_data.csv', 'duplicate_test.csv']\n        for file in files_to_remove:\n            if os.path.exists(file):\n                os.remove(file)\n    \n    def test_read_csv_success(self):\n        \"\"\"测试成功读取CSV文件\"\"\"\n        data = self.processor.read_csv('test_data.csv')\n        self.assertIsInstance(data, pd.DataFrame)\n        self.assertEqual(data.shape, (6, 4))\n        self.assertEqual(list(data.columns), ['name', 'age', 'city', 'salary'])\n    \n    def test_read_csv_file_not_found(self):\n        \"\"\"测试读取不存在的文件\"\"\"\n        with self.assertRaises(FileNotFoundError):\n            self.processor.read_csv('non_existent_file.csv')\n    \n    def test_clean_data_remove_duplicates(self):\n        \"\"\"测试删除重复行\"\"\"\n        # 创建一个明确有重复行的测试数据\n        duplicate_data = pd.DataFrame({\n            'name': ['Alice', 'Bob', 'Alice'],\n            'age': [25, 30, 25],\n            'city': ['New York', 'London', 'New York'],\n            'salary': [50000, 60000, 50000]\n        })\n        duplicate_data.to_csv('duplicate_test.csv', index=False)\n        \n        processor2 = DataProcessor()\n        processor2.read_csv('duplicate_test.csv')\n        cleaned_data = processor2.clean_data(remove_duplicates=True)\n        \n        # 3行应该变成2行（删除重复行）\n        self.assertEqual(cleaned_data.shape[0], 2)\n        \n        # 清理临时文件\n        os.remove('duplicate_test.csv')\n    \n    def test_clean_data_drop_missing(self):\n        \"\"\"测试删除缺失值\"\"\"\n        self.processor.read_csv('test_data.csv')\n        cleaned_data = self.processor.clean_data(\n            remove_duplicates=False,  # 先不删除重复项，只测试缺失值处理\n            handle_missing='drop'\n        )\n        \n        # 检查是否删除了包含NaN的行\n        # 原始数据有两行包含NaN: \n        # 1. name为NaN的行\n        # 2. salary为NaN的行 (但这一行在删除重复项时可能已被处理)\n        # 实际上，由于默认会删除重复项，我们需要重新测试\n        \n        # 创建一个更简单的测试数据集\n        simple_data = pd.DataFrame({\n            'A': [1, 2, np.nan, 4],\n            'B': [5, np.nan, 7, 8]\n        })\n        simple_data.to_csv('simple_test_data.csv', index=False)\n        \n        processor_simple = DataProcessor()\n        processor_simple.read_csv('simple_test_data.csv')\n        cleaned_simple = processor_simple.clean_data(handle_missing='drop')\n        \n        # 应该只剩下没有NaN的行 (只有第4行)\n        self.assertEqual(cleaned_simple.shape[0], 2)  # 第1行和第4行没有NaN\n        \n        # 清理临时文件\n        os.remove('simple_test_data.csv')\n    \n    def test_clean_data_fill_mean(self):\n        \"\"\"测试用均值填充缺失值\"\"\"\n        # 创建一个简单的测试数据集以避免重复项干扰\n        simple_data = pd.DataFrame({\n            'A': [1, 2, np.nan, 4],\n            'B': [5, np.nan, 7, 8]\n        })\n        simple_data.to_csv('simple_test_data2.csv', index=False)\n        \n        processor_simple = DataProcessor()\n        processor_simple.read_csv('simple_test_data2.csv')\n        cleaned_simple = processor_simple.clean_data(handle_missing='fill_mean')\n        \n        # 检查NaN是否被填充\n        self.assertFalse(cleaned_simple['A'].isnull().any())\n        self.assertFalse(cleaned_simple['B'].isnull().any())\n        \n        # 检查是否用均值填充 (A列均值为(1+2+4)/3=2.333, B列均值为(5+7+8)/3=6.667)\n        a_mean = (1 + 2 + 4) / 3\n        b_mean = (5 + 7 + 8) / 3\n        \n        # 找到原始NaN的位置并验证填充值\n        original_a_nan = simple_data['A'].isnull()\n        original_b_nan = simple_data['B'].isnull()\n        \n        if original_a_nan.any():\n            filled_value_a = cleaned_simple.loc[original_a_nan, 'A'].iloc[0]\n            self.assertAlmostEqual(filled_value_a, a_mean, places=10)\n            \n        if original_b_nan.any():\n            filled_value_b = cleaned_simple.loc[original_b_nan, 'B'].iloc[0]\n            self.assertAlmostEqual(filled_value_b, b_mean, places=10)\n        \n        # 清理临时文件\n        os.remove('simple_test_data2.csv')\n    \n    def test_clean_data_remove_columns(self):\n        \"\"\"测试删除指定列\"\"\"\n        self.processor.read_csv('test_data.csv')\n        cleaned_data = self.processor.clean_data(\n            remove_columns=['city', 'non_existent_column']\n        )\n        \n        # 检查city列是否被删除\n        self.assertNotIn('city', cleaned_data.columns)\n        # 检查其他列是否还在\n        self.assertIn('name', cleaned_data.columns)\n        self.assertIn('age', cleaned_data.columns)\n        self.assertIn('salary', cleaned_data.columns)\n    \n    def test_get_data_info(self):\n        \"\"\"测试获取数据信息\"\"\"\n        self.processor.read_csv('test_data.csv')\n        info = self.processor.get_data_info()\n        \n        self.assertIn('shape', info)\n        self.assertIn('columns', info)\n        self.assertIn('missing_values', info)\n        self.assertIn('data_types', info)\n        self.assertIn('duplicate_rows', info)\n        \n        self.assertEqual(info['shape'], (6, 4))\n        self.assertEqual(len(info['columns']), 4)\n    \n    def test_save_data(self):\n        \"\"\"测试保存数据\"\"\"\n        self.processor.read_csv('test_data.csv')\n        self.processor.save_data('output_data.csv')\n        \n        # 检查文件是否创建\n        self.assertTrue(os.path.exists('output_data.csv'))\n        \n        # 读取保存的文件验证内容\n        saved_data = pd.read_csv('output_data.csv')\n        pd.testing.assert_frame_equal(\n            saved_data.reset_index(drop=True), \n            self.processor.data.reset_index(drop=True)\n        )\n\nif __name__ == '__main__':\n    # 运行测试\n    unittest.main(verbosity=2)",
      "file_path": "test_processor.py"
    },
    "round": 4
  }
}