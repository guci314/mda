{
  "id": "tool_write_file_20250819_180019",
  "timestamp": "2025-08-19T18:00:19.604394",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "from typing import List, Optional, Dict\nfrom datetime import datetime\nfrom ..domain.models import BlogPost, BlogPostCreate, BlogPostUpdate\nfrom ..domain.repository import BlogPostRepository\n\n\nclass InMemoryBlogPostRepository(BlogPostRepository):\n    def __init__(self):\n        self.posts: Dict[int, BlogPost] = {}\n        self.counter = 1\n\n    def create(self, post: BlogPostCreate) -> BlogPost:\n        blog_post = BlogPost(\n            id=self.counter,\n            title=post.title,\n            content=post.content,\n            author=post.author,\n            created_at=datetime.now(),\n            updated_at=datetime.now()\n        )\n        self.posts[self.counter] = blog_post\n        self.counter += 1\n        return blog_post\n\n    def get_by_id(self, post_id: int) -> Optional[BlogPost]:\n        return self.posts.get(post_id)\n\n    def get_all(self) -> List[BlogPost]:\n        return list(self.posts.values())\n\n    def update(self, post_id: int, post_update: BlogPostUpdate) -> Optional[BlogPost]:\n        if post_id not in self.posts:\n            return None\n            \n        post = self.posts[post_id]\n        if post_update.title is not None:\n            post.title = post_update.title\n        if post_update.content is not None:\n            post.content = post_update.content\n        post.updated_at = datetime.now()\n        \n        self.posts[post_id] = post\n        return post\n\n    def delete(self, post_id: int) -> bool:\n        if post_id in self.posts:\n            del self.posts[post_id]\n            return True\n        return False",
      "file_path": "blog_system/service/in_memory_repository.py"
    },
    "round": 7
  }
}