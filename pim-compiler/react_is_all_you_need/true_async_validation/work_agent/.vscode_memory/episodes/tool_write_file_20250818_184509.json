{
  "id": "tool_write_file_20250818_184509",
  "timestamp": "2025-08-18T18:45:09.401261",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "utils/string_utils.py",
      "content": "\"\"\"\n字符串处理工具库\n提供常用的字符串处理函数\n\"\"\"\n\nimport re\nfrom typing import List, Optional\n\n\ndef is_empty(s: Optional[str]) -> bool:\n    \"\"\"\n    检查字符串是否为空或None\n    \n    Args:\n        s: 待检查的字符串\n        \n    Returns:\n        bool: 如果字符串为空或None返回True，否则返回False\n        \n    Examples:\n        >>> is_empty(None)\n        True\n        >>> is_empty(\"\")\n        True\n        >>> is_empty(\" \")\n        False\n        >>> is_empty(\"hello\")\n        False\n    \"\"\"\n    return s is None or len(s) == 0\n\n\ndef is_blank(s: Optional[str]) -> bool:\n    \"\"\"\n    检查字符串是否为空白（空、None或只包含空白字符）\n    \n    Args:\n        s: 待检查的字符串\n        \n    Returns:\n        bool: 如果字符串为空白返回True，否则返回False\n        \n    Examples:\n        >>> is_blank(None)\n        True\n        >>> is_blank(\"\")\n        True\n        >>> is_blank(\" \")\n        True\n        >>> is_blank(\"\\\\t\\\\n\")\n        True\n        >>> is_blank(\"hello\")\n        False\n    \"\"\"\n    return s is None or len(s.strip()) == 0\n\n\ndef capitalize_first(s: str) -> str:\n    \"\"\"\n    将字符串的第一个字符大写\n    \n    Args:\n        s: 待处理的字符串\n        \n    Returns:\n        str: 首字符大写的字符串\n        \n    Examples:\n        >>> capitalize_first(\"hello\")\n        'Hello'\n        >>> capitalize_first(\"HELLO\")\n        'HELLO'\n        >>> capitalize_first(\"\")\n        ''\n    \"\"\"\n    if is_empty(s):\n        return s\n    return s[0].upper() + s[1:]\n\n\ndef camel_to_snake(name: str) -> str:\n    \"\"\"\n    将驼峰命名转换为下划线命名\n    \n    Args:\n        name: 驼峰命名的字符串\n        \n    Returns:\n        str: 下划线命名的字符串\n        \n    Examples:\n        >>> camel_to_snake(\"camelCase\")\n        'camel_case'\n        >>> camel_to_snake(\"HTMLParser\")\n        'html_parser'\n        >>> camel_to_snake(\"XMLHttpRequest\")\n        'xml_http_request'\n    \"\"\"\n    # 在大写字母前插入下划线，但不在字符串开头\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    # 在小写字母后跟大写字母前插入下划线\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\ndef snake_to_camel(name: str) -> str:\n    \"\"\"\n    将下划线命名转换为驼峰命名\n    \n    Args:\n        name: 下划线命名的字符串\n        \n    Returns:\n        str: 驼峰命名的字符串\n        \n    Examples:\n        >>> snake_to_camel(\"snake_case\")\n        'snakeCase'\n        >>> snake_to_camel(\"xml_http_request\")\n        'xmlHttpRequest'\n    \"\"\"\n    components = name.split('_')\n    return components[0] + ''.join(word.capitalize() for word in components[1:])\n\n\ndef remove_prefix(s: str, prefix: str) -> str:\n    \"\"\"\n    移除字符串的指定前缀\n    \n    Args:\n        s: 原始字符串\n        prefix: 要移除的前缀\n        \n    Returns:\n        str: 移除前缀后的字符串\n        \n    Examples:\n        >>> remove_prefix(\"unhappy\", \"un\")\n        'happy'\n        >>> remove_prefix(\"hello\", \"xyz\")\n        'hello'\n    \"\"\"\n    if s.startswith(prefix):\n        return s[len(prefix):]\n    return s\n\n\ndef remove_suffix(s: str, suffix: str) -> str:\n    \"\"\"\n    移除字符串的指定后缀\n    \n    Args:\n        s: 原始字符串\n        suffix: 要移除的后缀\n        \n    Returns:\n        str: 移除后缀后的字符串\n        \n    Examples:\n        >>> remove_suffix(\"happiness\", \"ness\")\n        'happy'\n        >>> remove_suffix(\"hello\", \"xyz\")\n        'hello'\n    \"\"\"\n    if s.endswith(suffix):\n        return s[:-len(suffix)]\n    return s\n\n\ndef truncate(s: str, max_length: int, suffix: str = \"...\") -> str:\n    \"\"\"\n    截断字符串到指定长度\n    \n    Args:\n        s: 原始字符串\n        max_length: 最大长度\n        suffix: 截断后添加的后缀\n        \n    Returns:\n        str: 截断后的字符串\n        \n    Examples:\n        >>> truncate(\"This is a long string\", 10)\n        'This is a...'\n        >>> truncate(\"Short\", 10)\n        'Short'\n    \"\"\"\n    if len(s) <= max_length:\n        return s\n    suffix_len = len(suffix)\n    if suffix_len >= max_length:\n        return suffix[:max_length]\n    return s[:max_length - suffix_len] + suffix\n\n\ndef split_by_multiple_separators(s: str, separators: List[str]) -> List[str]:\n    \"\"\"\n    使用多个分隔符分割字符串\n    \n    Args:\n        s: 待分割的字符串\n        separators: 分隔符列表\n        \n    Returns:\n        List[str]: 分割后的字符串列表\n        \n    Examples:\n        >>> split_by_multiple_separators(\"a,b;c:d\", [\",\", \";\", \":\"])\n        ['a', 'b', 'c', 'd']\n    \"\"\"\n    import re\n    pattern = '|'.join(re.escape(sep) for sep in separators)\n    return re.split(pattern, s)"
    },
    "round": 2
  }
}