{
  "id": "tool_write_file_20250818_184547",
  "timestamp": "2025-08-18T18:45:47.299971",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "file_path": "utils/file_utils.py",
      "content": "\"\"\"\n文件处理工具库\n提供常用的文件处理函数\n\"\"\"\n\nimport os\nimport json\nimport pickle\nfrom typing import Any, List, Optional, Union\nfrom pathlib import Path\n\n\ndef read_file(file_path: Union[str, Path]) -> str:\n    \"\"\"\n    读取文件内容为字符串\n    \n    Args:\n        file_path: 文件路径\n        \n    Returns:\n        str: 文件内容\n        \n    Raises:\n        FileNotFoundError: 文件不存在\n        IOError: 读取文件时发生错误\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            return f.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"文件未找到: {file_path}\")\n    except Exception as e:\n        raise IOError(f\"读取文件时发生错误: {e}\")\n\n\ndef write_file(file_path: Union[str, Path], content: str) -> None:\n    \"\"\"\n    将内容写入文件\n    \n    Args:\n        file_path: 文件路径\n        content: 要写入的内容\n        \n    Raises:\n        IOError: 写入文件时发生错误\n    \"\"\"\n    try:\n        # 确保目录存在\n        Path(file_path).parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.write(content)\n    except Exception as e:\n        raise IOError(f\"写入文件时发生错误: {e}\")\n\n\ndef append_to_file(file_path: Union[str, Path], content: str) -> None:\n    \"\"\"\n    追加内容到文件末尾\n    \n    Args:\n        file_path: 文件路径\n        content: 要追加的内容\n        \n    Raises:\n        IOError: 追加内容时发生错误\n    \"\"\"\n    try:\n        # 确保目录存在\n        Path(file_path).parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'a', encoding='utf-8') as f:\n            f.write(content)\n    except Exception as e:\n        raise IOError(f\"追加内容到文件时发生错误: {e}\")\n\n\ndef read_lines(file_path: Union[str, Path]) -> List[str]:\n    \"\"\"\n    读取文件内容为行列表\n    \n    Args:\n        file_path: 文件路径\n        \n    Returns:\n        List[str]: 文件内容的行列表\n        \n    Raises:\n        FileNotFoundError: 文件不存在\n        IOError: 读取文件时发生错误\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            return [line.rstrip('\\n') for line in f.readlines()]\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"文件未找到: {file_path}\")\n    except Exception as e:\n        raise IOError(f\"读取文件时发生错误: {e}\")\n\n\ndef write_lines(file_path: Union[str, Path], lines: List[str]) -> None:\n    \"\"\"\n    将行列表写入文件\n    \n    Args:\n        file_path: 文件路径\n        lines: 要写入的行列表\n        \n    Raises:\n        IOError: 写入文件时发生错误\n    \"\"\"\n    try:\n        # 确保目录存在\n        Path(file_path).parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'w', encoding='utf-8') as f:\n            for line in lines:\n                f.write(line + '\\n')\n    except Exception as e:\n        raise IOError(f\"写入文件时发生错误: {e}\")\n\n\ndef file_exists(file_path: Union[str, Path]) -> bool:\n    \"\"\"\n    检查文件是否存在\n    \n    Args:\n        file_path: 文件路径\n        \n    Returns:\n        bool: 文件存在返回True，否则返回False\n    \"\"\"\n    return Path(file_path).exists()\n\n\ndef delete_file(file_path: Union[str, Path]) -> bool:\n    \"\"\"\n    删除文件\n    \n    Args:\n        file_path: 文件路径\n        \n    Returns:\n        bool: 删除成功返回True，否则返回False\n    \"\"\"\n    try:\n        if file_exists(file_path):\n            os.remove(file_path)\n            return True\n        return False\n    except Exception:\n        return False\n\n\ndef get_file_size(file_path: Union[str, Path]) -> int:\n    \"\"\"\n    获取文件大小（字节）\n    \n    Args:\n        file_path: 文件路径\n        \n    Returns:\n        int: 文件大小（字节），文件不存在返回-1\n        \n    Examples:\n        >>> size = get_file_size(\"example.txt\")\n        >>> print(f\"文件大小: {size} 字节\")\n    \"\"\"\n    try:\n        return os.path.getsize(file_path)\n    except FileNotFoundError:\n        return -1\n\n\ndef read_json(file_path: Union[str, Path]) -> Any:\n    \"\"\"\n    读取JSON文件\n    \n    Args:\n        file_path: JSON文件路径\n        \n    Returns:\n        Any: JSON解析后的数据\n        \n    Raises:\n        FileNotFoundError: 文件不存在\n        json.JSONDecodeError: JSON格式错误\n        IOError: 读取文件时发生错误\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            return json.load(f)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"文件未找到: {file_path}\")\n    except json.JSONDecodeError as e:\n        raise json.JSONDecodeError(f\"JSON格式错误: {e}\", e.doc, e.pos)\n    except Exception as e:\n        raise IOError(f\"读取文件时发生错误: {e}\")\n\n\ndef write_json(file_path: Union[str, Path], data: Any, indent: int = 2) -> None:\n    \"\"\"\n    将数据写入JSON文件\n    \n    Args:\n        file_path: JSON文件路径\n        data: 要写入的数据\n        indent: JSON缩进空格数\n        \n    Raises:\n        IOError: 写入文件时发生错误\n    \"\"\"\n    try:\n        # 确保目录存在\n        Path(file_path).parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, ensure_ascii=False, indent=indent)\n    except Exception as e:\n        raise IOError(f\"写入JSON文件时发生错误: {e}\")\n\n\ndef read_pickle(file_path: Union[str, Path]) -> Any:\n    \"\"\"\n    读取pickle文件\n    \n    Args:\n        file_path: pickle文件路径\n        \n    Returns:\n        Any: 反序列化后的对象\n        \n    Raises:\n        FileNotFoundError: 文件不存在\n        IOError: 读取文件时发生错误\n    \"\"\"\n    try:\n        with open(file_path, 'rb') as f:\n            return pickle.load(f)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"文件未找到: {file_path}\")\n    except Exception as e:\n        raise IOError(f\"读取pickle文件时发生错误: {e}\")\n\n\ndef write_pickle(file_path: Union[str, Path], obj: Any) -> None:\n    \"\"\"\n    将对象序列化写入pickle文件\n    \n    Args:\n        file_path: pickle文件路径\n        obj: 要序列化的对象\n        \n    Raises:\n        IOError: 写入文件时发生错误\n    \"\"\"\n    try:\n        # 确保目录存在\n        Path(file_path).parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'wb') as f:\n            pickle.dump(obj, f)\n    except Exception as e:\n        raise IOError(f\"写入pickle文件时发生错误: {e}\")"
    },
    "round": 3
  }
}