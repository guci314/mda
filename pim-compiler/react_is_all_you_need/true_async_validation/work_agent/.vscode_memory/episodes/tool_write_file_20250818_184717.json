{
  "id": "tool_write_file_20250818_184717",
  "timestamp": "2025-08-18T18:47:17.666164",
  "event": "tool_write_file",
  "data": {
    "tool": "write_file",
    "arguments": {
      "content": "\"\"\"\n工具库测试文件\n测试string_utils和file_utils的功能\n\"\"\"\n\nimport os\nimport json\nimport tempfile\nfrom pathlib import Path\nimport sys\n\n# 添加utils目录到Python路径\nsys.path.insert(0, str(Path(__file__).parent / \"utils\"))\n\nfrom string_utils import *\nfrom file_utils import *\n\n\ndef test_string_utils():\n    \"\"\"测试字符串工具函数\"\"\"\n    print(\"开始测试字符串工具...\")\n    \n    # 测试is_empty函数\n    assert is_empty(None) == True\n    assert is_empty(\"\") == True\n    assert is_empty(\" \") == False\n    assert is_empty(\"hello\") == False\n    print(\"✓ is_empty测试通过\")\n    \n    # 测试is_blank函数\n    assert is_blank(None) == True\n    assert is_blank(\"\") == True\n    assert is_blank(\" \") == True\n    assert is_blank(\"\\t\\n\") == True\n    assert is_blank(\"hello\") == False\n    print(\"✓ is_blank测试通过\")\n    \n    # 测试capitalize_first函数\n    assert capitalize_first(\"hello\") == \"Hello\"\n    assert capitalize_first(\"HELLO\") == \"HELLO\"\n    assert capitalize_first(\"\") == \"\"\n    assert capitalize_first(\"h\") == \"H\"\n    print(\"✓ capitalize_first测试通过\")\n    \n    # 测试camel_to_snake函数\n    assert camel_to_snake(\"camelCase\") == \"camel_case\"\n    assert camel_to_snake(\"HTMLParser\") == \"html_parser\"\n    assert camel_to_snake(\"XMLHttpRequest\") == \"xml_http_request\"\n    assert camel_to_snake(\"simple\") == \"simple\"\n    print(\"✓ camel_to_snake测试通过\")\n    \n    # 测试snake_to_camel函数\n    assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel(\"xml_http_request\") == \"xmlHttpRequest\"\n    assert snake_to_camel(\"simple\") == \"simple\"\n    print(\"✓ snake_to_camel测试通过\")\n    \n    # 测试remove_prefix函数\n    assert remove_prefix(\"unhappy\", \"un\") == \"happy\"\n    assert remove_prefix(\"hello\", \"xyz\") == \"hello\"\n    assert remove_prefix(\"\", \"un\") == \"\"\n    print(\"✓ remove_prefix测试通过\")\n    \n    # 测试remove_suffix函数\n    assert remove_suffix(\"happiness\", \"ness\") == \"happy\"\n    assert remove_suffix(\"hello\", \"xyz\") == \"hello\"\n    assert remove_suffix(\"\", \"ness\") == \"\"\n    print(\"✓ remove_suffix测试通过\")\n    \n    # 测试truncate函数\n    assert truncate(\"This is a long string\", 10) == \"This is a...\"\n    assert truncate(\"Short\", 10) == \"Short\"\n    assert truncate(\"Exact12345\", 10) == \"Exact12345\"\n    print(\"✓ truncate测试通过\")\n    \n    # 测试split_by_multiple_separators函数\n    result = split_by_multiple_separators(\"a,b;c:d\", [\",\", \";\", \":\"])\n    assert result == [\"a\", \"b\", \"c\", \"d\"]\n    result = split_by_multiple_separators(\"a,,b\", [\",\"])\n    assert result == [\"a\", \"\", \"b\"]\n    print(\"✓ split_by_multiple_separators测试通过\")\n    \n    print(\"所有字符串工具测试通过!\\n\")\n\n\ndef test_file_utils():\n    \"\"\"测试文件工具函数\"\"\"\n    print(\"开始测试文件工具...\")\n    \n    # 创建临时目录进行测试\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_path = Path(temp_dir)\n        \n        # 测试文件写入和读取\n        test_file = temp_path / \"test.txt\"\n        content = \"Hello, World!\\nThis is a test file.\"\n        \n        # 测试write_file和read_file\n        write_file(test_file, content)\n        assert read_file(test_file) == content\n        print(\"✓ 文件写入和读取测试通过\")\n        \n        # 测试append_to_file\n        append_content = \"\\nAppended content.\"\n        append_to_file(test_file, append_content)\n        assert read_file(test_file) == content + append_content\n        print(\"✓ 文件追加测试通过\")\n        \n        # 测试read_lines和write_lines\n        lines = [\"Line 1\", \"Line 2\", \"Line 3\"]\n        lines_file = temp_path / \"lines.txt\"\n        write_lines(lines_file, lines)\n        assert read_lines(lines_file) == lines\n        print(\"✓ 行读写测试通过\")\n        \n        # 测试file_exists\n        assert file_exists(test_file) == True\n        assert file_exists(temp_path / \"nonexistent.txt\") == False\n        print(\"✓ 文件存在性检查测试通过\")\n        \n        # 测试get_file_size\n        size = get_file_size(test_file)\n        assert size > 0\n        assert get_file_size(temp_path / \"nonexistent.txt\") == -1\n        print(\"✓ 文件大小获取测试通过\")\n        \n        # 测试delete_file\n        delete_file(test_file)\n        assert file_exists(test_file) == False\n        print(\"✓ 文件删除测试通过\")\n        \n        # 测试JSON读写\n        json_file = temp_path / \"test.json\"\n        data = {\"name\": \"张三\", \"age\": 30, \"skills\": [\"Python\", \"JavaScript\"]}\n        write_json(json_file, data)\n        loaded_data = read_json(json_file)\n        assert loaded_data == data\n        print(\"✓ JSON读写测试通过\")\n        \n        # 测试pickle读写\n        pickle_file = temp_path / \"test.pkl\"\n        test_obj = {\"list\": [1, 2, 3], \"dict\": {\"a\": 1, \"b\": 2}}\n        write_pickle(pickle_file, test_obj)\n        loaded_obj = read_pickle(pickle_file)\n        assert loaded_obj == test_obj\n        print(\"✓ Pickle读写测试通过\")\n        \n    print(\"所有文件工具测试通过!\\n\")\n\n\ndef main():\n    \"\"\"主测试函数\"\"\"\n    print(\"开始测试工具库...\\n\")\n    \n    try:\n        test_string_utils()\n        test_file_utils()\n        print(\"所有测试通过! 工具库功能正常。\")\n    except Exception as e:\n        print(f\"测试失败: {e}\")\n        raise\n\n\nif __name__ == \"__main__\":\n    main()",
      "file_path": "test_utils.py"
    },
    "round": 8
  }
}