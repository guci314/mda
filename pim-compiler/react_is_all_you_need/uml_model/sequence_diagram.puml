@startuml React执行流程序列图

!define PARTICIPANT participant
!define ACTOR actor

skinparam sequence {
    ArrowColor #4A90E2
    ActorBorderColor #4A90E2
    LifeLineBorderColor #4A90E2
    ParticipantBorderColor #4A90E2
}

ACTOR User
PARTICIPANT ReactAgentMinimal
PARTICIPANT "LLM API" as API
PARTICIPANT Function
PARTICIPANT ReadFileTool
PARTICIPANT WriteFileTool
PARTICIPANT ExecuteCommandTool

== 初始化阶段 ==

User -> ReactAgentMinimal: 创建Agent(work_dir, params...)
activate ReactAgentMinimal
ReactAgentMinimal -> ReactAgentMinimal: load_env_file()
note right: 自动加载.env文件

ReactAgentMinimal -> ReactAgentMinimal: _detect_api_key()
ReactAgentMinimal -> ReactAgentMinimal: _detect_base_url()

ReactAgentMinimal -> ReactAgentMinimal: _load_knowledge()
note right: 加载structured_notes.md

ReactAgentMinimal -> ReactAgentMinimal: _create_tool_instances()
ReactAgentMinimal -> ReadFileTool: new ReadFileTool(work_dir)
ReactAgentMinimal -> WriteFileTool: new WriteFileTool(work_dir)
ReactAgentMinimal -> ExecuteCommandTool: new ExecuteCommandTool(work_dir)

ReactAgentMinimal -> ReactAgentMinimal: tools = [tool.to_openai_function()]
note right: 转换为OpenAI格式

ReactAgentMinimal --> User: Agent初始化完成
deactivate ReactAgentMinimal

== 任务执行阶段 ==

User -> ReactAgentMinimal: execute(task="...")
activate ReactAgentMinimal

ReactAgentMinimal -> ReactAgentMinimal: _build_minimal_prompt()
note right: 构建系统提示词\n包含知识库内容

ReactAgentMinimal -> ReactAgentMinimal: messages = [system, user]

loop 执行循环 (最多max_rounds轮)
    
    ReactAgentMinimal -> API: _call_api(messages, tools)
    note right: 传递消息历史\n和工具定义
    
    API --> ReactAgentMinimal: response (with tool_calls?)
    
    ReactAgentMinimal -> ReactAgentMinimal: messages.append(assistant_message)
    
    alt 滑动窗口管理
        ReactAgentMinimal -> ReactAgentMinimal: if len(messages) > window_size
        note right: 保留系统消息\n+ 最近N条消息
    end
    
    alt 有工具调用
        loop 对每个tool_call
            ReactAgentMinimal -> ReactAgentMinimal: _execute_tool(name, args)
            
            alt tool_name == "read_file"
                ReactAgentMinimal -> ReadFileTool: execute(file_path, offset?, limit?)
                ReadFileTool --> ReactAgentMinimal: 文件内容
            else tool_name == "write_file"
                ReactAgentMinimal -> WriteFileTool: execute(file_path, content)
                WriteFileTool --> ReactAgentMinimal: 写入成功
                
                alt 写入笔记文件
                    note over ReactAgentMinimal: 检测到笔记保存\n(外部持久化)
                end
            else tool_name == "execute_command"
                ReactAgentMinimal -> ExecuteCommandTool: execute(command)
                ExecuteCommandTool --> ReactAgentMinimal: 命令输出
            end
            
            ReactAgentMinimal -> ReactAgentMinimal: messages.append(tool_result)
        end
    end
    
    alt finish_reason == "stop" && no tool_calls
        ReactAgentMinimal --> User: 返回最终结果
        note right: 任务完成
    end
    
end

deactivate ReactAgentMinimal

== 笔记策略 (结构化三层) ==

note over ReactAgentMinimal
    Agent自主决定何时写笔记：
    
    1. experience.md
       - 发现可复用模式时
       - 解决新问题后
    
    2. task_state.md  
       - 任务开始时
       - 状态变化时
       - 添加TODO时
    
    3. environment.md
       - 首次理解项目时
       - 架构变更时
end note

@enduml