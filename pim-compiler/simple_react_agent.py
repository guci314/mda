#!/usr/bin/env python3
"""‰ΩøÁî®DeepSeek APIÊ®°ÊãüReact AgentË°å‰∏∫"""

import os
import json
import time
from pathlib import Path
from datetime import datetime
import requests
from dotenv import load_dotenv

# Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
load_dotenv()

# ÂÖ®Â±ÄËæìÂá∫ÁõÆÂΩï
output_dir = Path("output/react_agent_enhanced_v2")

def call_deepseek(prompt: str, system_prompt: str = None) -> str:
    """Ë∞ÉÁî®DeepSeek API"""
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        raise ValueError("DEEPSEEK_API_KEY not set")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    messages.append({"role": "user", "content": prompt})
    
    data = {
        "model": "deepseek-chat",
        "messages": messages,
        "temperature": 0.7
    }
    
    response = requests.post(
        "https://api.deepseek.com/v1/chat/completions",
        headers=headers,
        json=data,
        timeout=180
    )
    
    if response.status_code != 200:
        raise Exception(f"API call failed: {response.text}")
    
    return response.json()["choices"][0]["message"]["content"]

def generate_psm(pim_content: str) -> str:
    """ÁîüÊàêPSM"""
    prompt = f"""‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑËΩØ‰ª∂Êû∂ÊûÑÂ∏àÔºåË¥üË¥£ÁîüÊàê PSMÔºàPlatform Specific ModelÔºâ„ÄÇ

ÁõÆÊ†áÂπ≥Âè∞: FastAPI

ËØ∑Ê†πÊçÆ‰ª•‰∏ãPIMÁîüÊàêËØ¶ÁªÜÁöÑPSMÊñáÊ°£Ôºö

{pim_content}

Ë¶ÅÊ±ÇÔºö
1. ÂåÖÂê´ËØ¶ÁªÜÁöÑÊï∞ÊçÆÊ®°ÂûãÂÆö‰πâÔºàÂ≠óÊÆµÁ±ªÂûã„ÄÅÁ∫¶ÊùüÁ≠âÔºâ
2. APIÁ´ØÁÇπËÆæËÆ°ÔºàRESTfulÔºâ  
3. ÊúçÂä°Â±ÇÊñπÊ≥ïÂÆö‰πâ
4. ËÆ§ËØÅÂíåÊùÉÈôêÊéßÂà∂
5. Êï∞ÊçÆÂ∫ìËÆæËÆ°

ËØ∑‰ΩøÁî®MarkdownÊ†ºÂºèËæìÂá∫„ÄÇ"""

    return call_deepseek(prompt)

def simulate_react_agent(psm_content: str):
    """Ê®°ÊãüReact AgentÁîüÊàê‰ª£Á†Å"""
    
    # Á≥ªÁªüÊèêÁ§∫ËØç
    system_prompt = """‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑ FastAPI ÂºÄÂèë‰∏ìÂÆ∂„ÄÇ

‰Ω†ÁöÑ‰ªªÂä°ÊòØÊ†πÊçÆ PSMÔºàPlatform Specific ModelÔºâÁîüÊàêÂÆåÊï¥ÁöÑ FastAPI Â∫îÁî®‰ª£Á†Å„ÄÇ

‰Ω†ÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÂ∑•ÂÖ∑Ôºö
- write_file(file_path, content): ÂÜôÂÖ•Êñá‰ª∂
- create_directory(directory_path): ÂàõÂª∫ÁõÆÂΩï
- list_directory(directory_path): ÂàóÂá∫ÁõÆÂΩïÂÜÖÂÆπ

ËØ∑ÊåâÁÖß‰ª•‰∏ãÊ†ºÂºèËæìÂá∫‰Ω†ÁöÑÊìç‰ΩúÔºö
ACTION: tool_name
ARGS: {
  "arg1": "value1",
  "arg2": "value2"
}

ÊØèÊ¨°Âè™ËÉΩÊâßË°å‰∏Ä‰∏™Êìç‰Ωú„ÄÇ"""

    # Á¨¨‰∏ÄÊ≠•ÔºöËÆ©AgentËßÑÂàíÈ°πÁõÆÁªìÊûÑ
    plan_prompt = f"""ËØ∑Ê†πÊçÆ‰ª•‰∏ãPSMËßÑÂàíFastAPIÈ°πÁõÆÁöÑÁõÆÂΩïÁªìÊûÑÂíåÊñá‰ª∂ÂàóË°®Ôºö

{psm_content}

ËØ∑ÂàóÂá∫ÈúÄË¶ÅÂàõÂª∫ÁöÑÊâÄÊúâÁõÆÂΩïÂíåÊñá‰ª∂„ÄÇ"""

    print("\nü§ñ ReactAgent: Planning project structure...")
    plan = call_deepseek(plan_prompt, system_prompt)
    print(plan[:500] + "..." if len(plan) > 500 else plan)
    
    # ÂàõÂª∫Âü∫Êú¨È°πÁõÆÁªìÊûÑ
    print("\nü§ñ ReactAgent: Creating project structure...")
    
    # ÂàõÂª∫ÁõÆÂΩï
    directories = [
        "app",
        "app/api",
        "app/api/endpoints",
        "app/core",
        "app/db",
        "app/models",
        "app/schemas",
        "app/services",
        "app/crud",
        "tests"
    ]
    
    for dir_path in directories:
        (output_dir / dir_path).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úì Created directory: {dir_path}")
    
    # ÁîüÊàêÊñá‰ª∂ÂÜÖÂÆπ
    files_to_generate = [
        ("requirements.txt", "ÁîüÊàêrequirements.txtÔºåÂåÖÂê´FastAPIÂèäÊâÄÊúâÂøÖË¶ÅÁöÑ‰æùËµñ"),
        ("README.md", "ÁîüÊàêÈ°πÁõÆREADMEÊñáÊ°£"),
        ("main.py", "ÁîüÊàê‰∏ªÂ∫îÁî®ÂÖ•Âè£Êñá‰ª∂"),
        ("app/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/core/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/core/config.py", "ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂"),
        ("app/core/security.py", "ÁîüÊàêÂÆâÂÖ®Áõ∏ÂÖ≥ÂäüËÉΩ"),
        ("app/db/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/db/base.py", "ÁîüÊàêÊï∞ÊçÆÂ∫ìÂü∫Á°ÄÈÖçÁΩÆ"),
        ("app/db/session.py", "ÁîüÊàêÊï∞ÊçÆÂ∫ì‰ºöËØùÁÆ°ÁêÜ"),
        ("app/models/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/models/user.py", "Ê†πÊçÆPSMÁîüÊàêÁî®Êà∑Ê®°Âûã"),
        ("app/schemas/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/schemas/user.py", "Ê†πÊçÆPSMÁîüÊàêÁî®Êà∑Schema"),
        ("app/api/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/api/api.py", "ÁîüÊàêAPIË∑ØÁî±ÈÖçÁΩÆ"),
        ("app/api/endpoints/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/api/endpoints/users.py", "Ê†πÊçÆPSMÁîüÊàêÁî®Êà∑APIÁ´ØÁÇπ"),
        ("app/api/endpoints/auth.py", "Ê†πÊçÆPSMÁîüÊàêËÆ§ËØÅAPIÁ´ØÁÇπ"),
        ("app/services/__init__.py", "ÂàõÂª∫Á©∫ÁöÑ__init__.py"),
        ("app/services/user_service.py", "Ê†πÊçÆPSMÁîüÊàêÁî®Êà∑ÊúçÂä°"),
        ("app/services/auth_service.py", "Ê†πÊçÆPSMÁîüÊàêËÆ§ËØÅÊúçÂä°"),
        (".env.example", "ÁîüÊàêÁéØÂ¢ÉÂèòÈáèÁ§∫‰æãÊñá‰ª∂")
    ]
    
    print("\nü§ñ ReactAgent: Generating files...")
    
    for file_path, description in files_to_generate:
        print(f"\n  Generating: {file_path}")
        
        if file_path.endswith("__init__.py"):
            content = ""
        else:
            # ÁîüÊàêÊñá‰ª∂ÂÜÖÂÆπ
            file_prompt = f"""Âü∫‰∫é‰ª•‰∏ãPSMÔºå{description}Ôºö

{psm_content}

ËØ∑Áõ¥Êé•ËæìÂá∫Êñá‰ª∂ÂÜÖÂÆπÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïÈ¢ùÂ§ñÁöÑËØ¥Êòé„ÄÇ"""
            
            content = call_deepseek(file_prompt)
        
        # ÂÜôÂÖ•Êñá‰ª∂
        file_full_path = output_dir / file_path
        file_full_path.parent.mkdir(parents=True, exist_ok=True)
        file_full_path.write_text(content, encoding='utf-8')
        print(f"  ‚úì Created: {file_path}")
    
    print("\n‚úÖ All files generated successfully!")

def main():
    """‰∏ªÂáΩÊï∞"""
    print("=== Simulated ReactAgent Compilation ===")
    
    # Ê£ÄÊü•API key
    api_key = os.getenv("DEEPSEEK_API_KEY")
    if not api_key:
        print("‚ùå DEEPSEEK_API_KEY not set")
        return
    
    # ËØªÂèñPIM
    pim_file = Path("../models/domain/Áî®Êà∑ÁÆ°ÁêÜ_pim.md")
    if not pim_file.exists():
        print(f"‚ùå PIM file not found: {pim_file}")
        return
    
    pim_content = pim_file.read_text(encoding='utf-8')
    print(f"‚úÖ Loaded PIM: {pim_file}")
    
    # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"Output directory: {output_dir}")
    
    # ÂàõÂª∫Êó•ÂøóÊñá‰ª∂
    log_file = output_dir / "compile_output.log"
    log_content = []
    
    def log(message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S,%f")[:-3]
        log_line = f"{timestamp} - ReactAgent - INFO - {message}"
        print(message)
        log_content.append(log_line)
    
    try:
        # ÁîüÊàêPSM
        log("Starting compilation of ../models/domain/Áî®Êà∑ÁÆ°ÁêÜ_pim.md")
        log("Using generator: react-agent")
        log("Target platform: fastapi")
        log(f"Output directory: {output_dir}")
        
        log("\nStep 1: Generating PSM...")
        start_time = time.time()
        psm_content = generate_psm(pim_content)
        psm_time = time.time() - start_time
        
        # ‰øùÂ≠òPSM
        psm_file = output_dir / "user_management_psm.md"
        psm_file.write_text(psm_content, encoding='utf-8')
        log(f"PSM generated in {psm_time:.2f} seconds")
        
        # ÁîüÊàê‰ª£Á†Å
        log("\nStep 2: Generating code...")
        log("\n[1m> Entering new AgentExecutor chain...[0m")
        
        start_time = time.time()
        simulate_react_agent(psm_content)
        code_time = time.time() - start_time
        
        log(f"\n[1m> Finished chain.[0m")
        log(f"Code generated in {code_time:.2f} seconds")
        
        # ÁªüËÆ°Êñá‰ª∂
        python_files = list(output_dir.rglob("*.py"))
        total_files = list(output_dir.rglob("*.*"))
        
        log(f"\n‚úÖ Compilation Successful!")
        log(f"Total time: {psm_time + code_time:.2f} seconds")
        log(f"Files generated: {len(total_files)}")
        log(f"Python files: {len(python_files)}")
        
        # ‰øùÂ≠òÊó•Âøó
        log_file.write_text("\n".join(log_content), encoding='utf-8')
        
        print(f"\n‚úÖ Compilation complete!")
        print(f"Output directory: {output_dir}")
        print(f"Log file: {log_file}")
        
    except Exception as e:
        log(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        log_file.write_text("\n".join(log_content), encoding='utf-8')

if __name__ == "__main__":
    main()