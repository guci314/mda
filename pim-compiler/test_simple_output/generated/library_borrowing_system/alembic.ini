# A generic, single-database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template for migration file names, e.g. "alembic/versions/123456789_add_a_table.py"
file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone in which to execute the migration script
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to require revision identifiers to be
# sequential.  Only applicable if revision_environment is also
# true.
# sequential_revision_identifiers = false

# The SQLAlchemy URL to connect to the database.
# The 'sqlalchemy.url' value is read from the config file.
# If you have multiple databases, you can specify them here.
# sqlalchemy.url = driver://user:pass@localhost/dbname
sqlalchemy.url = sqlite:///./library.db


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for details.
# hooks =
# hook.black.type = exec
# hook.black.entrypoint = black
# hook.black.options = -l 79 %(path)s

# logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S
